#!/bin/sh

################################################
# Usage Instructions: 
#  1. fill in the following values to point to the target compilers:

if test "$USE_GCC" != "" ; then
# GCC-based compilers
CC='mpicc -O0' ; export CC  # vanilla target C compiler
CXX='mpicxx -O0' ; export CXX  # vanilla target C++ compiler
else
# XLC-based compilers
CC='blrts_xlc' ; export CC  # vanilla target C compiler
CXX='blrts_xlC' ; export CXX  # vanilla target C++ compiler
fi

# Host C compiler
# NOTE: you may need to set GCC_EXEC_PREFIX=/usr/bin/ 
# in your environment to get the correct assembler for gcc
HOST_CC="gcc" ; export HOST_CC # use PPC-32 host C compiler
HOST_CFLAGS="-g -O2" ; export HOST_CFLAGS

# Host C++ compiler - required by Titanium, not required for UPC or GASNet
HOST_CXX='g++' ; export HOST_CXX # use PPC-32 host C++ compiler
# g++ is recommended for building Titanium's tc, even when using an xlc backend,
# because the g++ STL is faster and improves application compiation time
# if you don't have g++, you can safely use xlC instead
#HOST_CXX='xlC' ; export HOST_CXX # use PPC-32 host C++ compiler
HOST_CXXFLAGS='' ; export HOST_CXXFLAGS

# Optional additional settings: (see configure --help for complete list)

if test "$USE_GCC" != "" ; then
# GCC-based compilers
MPI_CC='mpicc -O0' ; export MPI_CC     # MPI-enabled C compiler
#MPI_CFLAGS='' ; export MPI_CFLAGS  # flags for MPI_CC
else
# XLC-based compilers
MPI_CC='blrts_xlc  -I/bgl/BlueLight/ppcfloor/bglsys/include' ; export MPI_CC     # MPI-enabled C compiler
MPI_LIBS='-L/bgl/BlueLight/ppcfloor/bglsys/lib -lmpich.rts -lmsglayer.rts -lrts.rts -ldevices.rts' ; export MPI_LIBS      # libs for linking with MPI_CC
fi

# system batch submit command:
MPIRUN_CMD='cqsub -q short -t 10 -n %N %C' ; export MPIRUN_CMD  # launch command for MPI jobs
# BEWARE: the mpirun below boots its own partition on the BG/L, which may disrupt the system resource scheduler and anger the admins
#MPIRUN_CMD='mpirun -timeout 600 -np %N %V -verbose 0 -cwd %D -exe %P -args "%A"' ; export MPIRUN_CMD  # launch command for MPI jobs
EXTRA_CONFIGURE_ARGS='--enable-allow-gcc32 --enable-mpi --disable-udp --disable-amudp' ; export EXTRA_CONFIGURE_ARGS  # misc configure args to pass

# 2. Fill in the canonical target machine type. You can usually obtain this
#   by running config-aux/config.guess on the target machine
TARGET_ID='powerpc-blrts-linux-gnu'

# 3. Review the automatically-detected settings below and make corrections as necessary.

# 4. Place this output script in your top-level source directory and run it,
#   passing it any additional configure arguments as usual (see configure --help).

################################################
# AUTOMATICALLY DETECTED SETTINGS:


# Whether the system has a working version of anonymous mmap

# Auto-detect status: failed to open file, errno=13 'Permission denied'
CROSS_HAVE_MMAP='0' ; export CROSS_HAVE_MMAP

# The system VM page size (ie mmap granularity, even if swapping is not supported)

CROSS_PAGESIZE='4096' ; export CROSS_PAGESIZE

# Does the system stack grow up?

CROSS_STACK_GROWS_UP='0' ; export CROSS_STACK_GROWS_UP

# Is char a signed type?

CROSS_CHAR_IS_SIGNED='0' ; export CROSS_CHAR_IS_SIGNED

# Basic primitive C type sizes (in bytes)

CROSS_SIZEOF_CHAR='1' ; export CROSS_SIZEOF_CHAR
CROSS_SIZEOF_SHORT='2' ; export CROSS_SIZEOF_SHORT
CROSS_SIZEOF_INT='4' ; export CROSS_SIZEOF_INT
CROSS_SIZEOF_LONG='4' ; export CROSS_SIZEOF_LONG
CROSS_SIZEOF_LONG_LONG='8' ; export CROSS_SIZEOF_LONG_LONG
CROSS_SIZEOF_VOID_P='4' ; export CROSS_SIZEOF_VOID_P
CROSS_SIZEOF_SIZE_T='4' ; export CROSS_SIZEOF_SIZE_T
CROSS_SIZEOF_PTRDIFF_T='4' ; export CROSS_SIZEOF_PTRDIFF_T

# System signal values

CROSS_SIGHUP='1' ; export CROSS_SIGHUP
CROSS_SIGINT='2' ; export CROSS_SIGINT
CROSS_SIGQUIT='3' ; export CROSS_SIGQUIT
CROSS_SIGKILL='9' ; export CROSS_SIGKILL
CROSS_SIGTERM='15' ; export CROSS_SIGTERM
CROSS_SIGUSR1='10' ; export CROSS_SIGUSR1


SRCDIR=`dirname $0`
if test ! -f "$SRCDIR/configure" ; then
  echo "ERROR: The $0 script should be placed in the same directory as the configure script before execution"
  exit 1
fi
# Detect the build host machine type
HOST_ARG=`echo "$@" | grep -e --host`
HOST_APPEND=
if test "$HOST_ARG" = ""; then
  oldCC_FOR_BUILD="$CC_FOR_BUILD"
  oldHOST_CC="$HOST_CC"
  oldCC="$CC"
  CC_FOR_BUILD=
  HOST_CC=
  CC=
  if test "$HOST_ID" = ""; then
    HOST_ID=`$SRCDIR/config-aux/config.guess`
  fi
  if test "$HOST_ID" = ""; then
    echo 'ERROR: failed to auto-detect build host. Please run with --host=machineid to identify the host machine running this script'
    exit 1
  else
    HOST_APPEND="--host=$HOST_ID"
  fi
  CC_FOR_BUILD="$oldCC_FOR_BUILD"
  HOST_CC="$oldHOST_CC"
  CC="$oldCC"
fi
# Now that everything is setup, run the actual configure script
$SRCDIR/configure --enable-cross-compile $HOST_APPEND --build=$TARGET_ID --target=$TARGET_ID --program-prefix='' $EXTRA_CONFIGURE_ARGS "$@"
