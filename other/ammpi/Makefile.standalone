#  $Archive:: /Ti/AMMPI/Makefile                                         $
#     $Date: 2004/01/30 07:13:03 $
# $Revision: 1.6 $
# Description: Makefile for AMMPI
# Copyright 2000, Dan Bonachea <bonachea@cs.berkeley.edu>

# leave these lines alone
testprograms_ILP32only_all = testgetput testreadwrite
testprograms_ILP32only = ${testprograms_ILP32only_all}

# Set host system to the appropriate value to get the right prebaked Makefile
HOSTSYSTEM=${OSTYPE}.${MACHTYPE}
include Makefile.${HOSTSYSTEM}

# Uncomment one set of lines below to get debug or release configuration 
#ccflags = -DAMMPI_DEBUG=1 ${ccdebugflags} $(apputils_flags)
ccflags = -DAMMPI_NDEBUG=1 ${ccoptflags} $(apputils_flags)

#-------------------------------------------------------------------------------------
# You should never need to change things below this line

VPATH = $(srcdir)
includes = -I$(srcdir)
libraries = ${platform_libraries}
Ccompile = $(CC) -c ${ccflags} ${platform_defines} ${includes}
link = $(CC) ${ccflags} ${platform_defines} ${includes} 
linkend = ${libraries}

# all the test executables
testprograms =                  \
    testam                      \
    testbounce                  \
    testbulk                    \
    testlatency                 \
    testlatencyM                \
    testping                    \
    testreduce                  \
    $(testprograms_ILP32only)

# all the library objects and headers
objects=ammpi_ep.o ammpi_reqrep.o ammpi_spmd.o 
headers=Makefile* ammpi.h ammpi_internal.h ammpi_spmd.h

.PHONY: all tests clean veryclean

all: libammpi.a

# ---------- AMMPI library -------------
libammpi.a: ${objects}
	${ar} cru $@ ${objects}
	${ranlib} $@

# ---------- build targets -------------
# main target
tests: apputils.o ${testprograms}

# method to convert .cpp to .o (more reliable than ".cpp.o" method)
test%.o : $(testdir)/test%.c $(testdir)/apputils.h ${headers}
	${Ccompile} -DAMMPI -I$(testdir) $< -o $@

apputils.o : $(testdir)/apputils.c $(testdir)/apputils.h ${headers}
	${Ccompile} -DAMMPI -I$(testdir) $(testdir)/apputils.c -o apputils.o

%.o : %.c ${headers}
	${Ccompile} $< -o $@

# delete compiling byproducts
clean:
	rm -f *.o core gmon.out

veryclean: clean 
	rm -f ${testprograms} ${testprograms_ILP32only_all} libammpi.a
	@echo Done verycleaning.

# make a distribution
amxdist:
	@sh -x -c ' \
         VERSION=`grep "#define AMMPI_LIBRARY_VERSION" $(srcdir)/ammpi.h | head -1 | awk '"'"'{ print $$3 }'"'"'` \
         export VERSION ; \
         echo "+++ Building distribution for AMMPI version $$(VERSION) +++" && \
         rm -Rf ammpi$${VERSION}.tar.gz ammpi$${VERSION} && \
         mkdir ammpi$${VERSION} && \
         cp $(srcdir)/Makefile* $(srcdir)/*.[ch]* $(testdir)/*.[ch]* ammpi$${VERSION} && \
         rm -f ammpi$${VERSION}/Makefile.in ammpi$${VERSION}/Makefile.titanium && \
         tar -cvhf ammpi$${VERSION}.tar ammpi$${VERSION} && gzip -9 ammpi$${VERSION}.tar && \
         rm -Rf ammpi$${VERSION} && \
         echo "+++ ammpi$${VERSION}.tar.gz is ready for distribution +++" \
        '

# ---------- test programs -------------
test% : test%.o apputils.o libammpi.a ${libufxp}
	${link} -o $@ $< apputils.o -L. -lammpi ${linkend}

TEST_NODES=2
TEST_RUNCMD=mpirun -np $(TEST_NODES)
TEST_ITERS=100
TEST_MODE=P
TEST_DEPTH=32
TEST_DUPLEX=H
AMMPI_NETWORKDEPTH=$(TEST_DEPTH)
run-tests: tests
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo  Running AMMPI tests...
	@echo  If this fails to spawn a job, you may need to re-run with a
	@echo   command like: gmake run-tests TEST_RUNCMD=\"mpirun -np 2\"
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTPING
	$(TEST_RUNCMD) ./testping $(TEST_ITERS) $(TEST_MODE)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTLATENCY
	$(TEST_RUNCMD) ./testlatency $(TEST_ITERS) $(TEST_MODE)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTLATENCYM
	$(TEST_RUNCMD) ./testlatencyM $(TEST_ITERS) $(TEST_MODE) 64
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTBULK
	$(TEST_RUNCMD) ./testbulk $(TEST_ITERS) 1048576 $(TEST_MODE) $(TEST_DUPLEX)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTAMUDP
	$(TEST_RUNCMD) ./testam $(TEST_ITERS) $(TEST_MODE)
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTBOUNCE
	$(TEST_RUNCMD) ./testbounce $(TEST_ITERS) $(TEST_MODE) 
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTREDUCE
	$(TEST_RUNCMD) ./testreduce 
	@if test -x ./testgetput ; then \
	   echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ; \
	   echo TESTGETPUT ; \
           echo $(TEST_RUNCMD) ./testgetput $(TEST_ITERS) ; \
           $(TEST_RUNCMD) ./testgetput $(TEST_ITERS) ; \
        fi
	@if test -x ./testreadwrite ; then \
	   echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ; \
	   echo TESTREADWRITE ; \
           echo $(TEST_RUNCMD) ./testreadwrite $(TEST_ITERS) ; \
           $(TEST_RUNCMD) ./testreadwrite $(TEST_ITERS) ; \
        fi
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	@echo TESTS COMPLETE
	@echo +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

