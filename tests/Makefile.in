# $Header: /Users/kamil/work/gasnet-cvs2/gasnet/tests/Makefile.in,v 1.21 2004/03/17 00:22:37 phargrov Exp $
# Description: Makefile for GASNet tests
# Copyright 2002, Dan Bonachea <bonachea@cs.berkeley.edu>
# Terms of use are as specified in license.txt

all: 
	@echo This Makefile is not intended to be called directly
	@echo do a "make tests-seq" or "make tests-par" within the conduit directory

# linker to be used for MPI programs
GASNET_MPI_LD = @MPI_CC@

srcdir="@TOP_SRCDIR@/tests"

configfile=/dev/null # must be overridden by caller
include $(configfile)

Makefile: @TOP_SRCDIR@/tests/Makefile.in
	cd @TOP_BUILDDIR@ ; \
	CONFIG_HEADERS= CONFIG_FILES=tests/Makefile config.status

@USE_MPI_CONDUIT_TRUE@ MPI_TEST = testmpi

# tests that can be built in any mode
# in order of most useful execution
testprograms_seq =      \
        testgasnet      \
        testsmall       \
        testlarge       \
        testam          \
        testcore1       \
        testbarrier     \
        testlogGP       \
        testvis         \
        testmisc        \
        testalign       \
        testrand        \
        testexit        \
        testhsl         \
        testbarrierconf \
        testbarrierlate \
	testtools   

# tests that should only be built in PARSYNC and PAR modes
testprograms_parsync =  \

# tests that should only be built in PAR mode
testprograms_par =  \
	testthreads \
	$(MPI_TEST)

testprograms = $(testprograms_seq) $(testprograms_parsync) $(testprograms_par)

tests-seq: clean $(testprograms_seq)
	
tests-parsync: clean $(testprograms_seq) $(testprograms_parsync)
	
tests-par: clean $(testprograms_seq) $(testprograms_parsync) $(testprograms_par)
	
clean:
	rm -f $(testprograms:=@EXESUFFIX@)

distclean: 
	rm -f Makefile

@GASNET_SEGMENT_FAST_TRUE@GASNET_SEGMENT_STR="FAST"
@GASNET_SEGMENT_LARGE_TRUE@GASNET_SEGMENT_STR="LARGE"
@GASNET_SEGMENT_EVERYTHING_TRUE@GASNET_SEGMENT_STR="EVERYTHING"

# default node count
TEST_NODES=2
# provide args and node counts for specific tests
TEST_PARAMS=                    \
   testcore1_args="1000";       \
   testrand_args="1024";        \
   testlogGP_args="1000 65536"; \
   testmisc_nodes="1";

# omit tests that are supposed to fail or known to cause failures
testprograms_err =      \
        testexit        \
        testhsl         \
	$(MPI_TEST)

CONDUIT_NAME_UC=`echo $(CONDUIT_NAME) | @AWK@  '{print toupper($$0)}'`
run-tests:
	@$(TEST_PARAMS)                                                                                                                                                \
	export `echo "$(TEST_PARAMS)" | @AWK@ 'BEGIN {FS="=";RS=";"}{ print $$1 }'` ;                                                                                  \
	tests_to_run="" export tests_to_run ;                                                                                                                          \
	tests_to_ignore="" export tests_to_ignore ;                                                                                                                    \
	for file in $(testprograms) ; do if test -x "$$file" ; then                                                                                                    \
	  if test "`echo \"$(testprograms_err)\"| grep $$file ; exit 0`"; then                                                                                         \
	    tests_to_ignore="$$tests_to_ignore $$file" export tests_to_ignore ;                                                                                        \
	  else                                                                                                                                                         \
	    tests_to_run="$$tests_to_run $$file" export tests_to_run ;                                                                                                 \
	  fi ;                                                                                                                                                         \
	fi ; done ;                                                                                                                                                    \
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" ;                                                                           \
	echo " Running $(CONDUIT_NAME)-conduit tests:                                    " ;                                                                           \
	for file in $$tests_to_run ; do echo "   $$file" ; done ;                                                                                                      \
	if test "$$tests_to_ignore" ; then                                                                                                                             \
	  echo " Ignoring tests: $$tests_to_ignore" ;                                                                                                                  \
	fi ;                                                                                                                                                           \
	echo " If this fails to spawn a job, you may need to re-run with a command like: " ;                                                                           \
	echo "  gmake run-tests $(CONDUIT_NAME_UC)_RUNCMD=\"$(CONDUIT_RUNCMD)\"" ;                                                                                     \
	echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" ;                                                                           \
	TEST_RUNCMD="$$$(CONDUIT_NAME_UC)_RUNCMD" export TEST_RUNCMD ;                                                                                                 \
	TEST_RUNCMD="`eval echo $$TEST_RUNCMD`" export TEST_RUNCMD ;                                                                                                   \
	if test -z "$$TEST_RUNCMD" ; then                                                                                                                              \
	  TEST_RUNCMD="$(CONDUIT_RUNCMD)" export TEST_RUNCMD ;                                                                                                         \
	fi ;                                                                                                                                                           \
	for file in $$tests_to_run ; do                                                                                                                                \
	    threadmode=`cat $$file@EXESUFFIX@ | @AWK@ 'BEGIN {FS=" ";RS="$$"} /GASNetThreadModel: [^ ]* / { split($$2,A,/_/); print A[2] ; exit}'` export threadmode ; \
	    echo "*** Running $(CONDUIT_NAME)-conduit $$file in $$threadmode/$(GASNET_SEGMENT_STR) mode ***" ;                                                         \
	    args="$$""$${file}_args" ;                                                                                                                                 \
	    args="`eval echo $$args`" ;                                                                                                                                \
	    nodes="$$\{""$${file}_nodes-$(TEST_NODES)\}" ;                                                                                                             \
	    nodes="`eval eval echo $$nodes`" ;                                                                                                                         \
	    cmd="`echo \"$$TEST_RUNCMD\" | @AWK@ '{ gsub(\"%P\",\"./'$$file'\"); gsub(\"%N\",\"'$$nodes'\"); gsub(\"%A\",\"'"$$args"'\"); print $0 }'`" export cmd;    \
	    echo "$$cmd" ;                                                                                                                                             \
	    /usr/bin/time $$cmd || echo "ERROR: Test exited with failure code=$$?" ;                                                                                   \
	    echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" ;                                                                       \
	done ;                                                                                                                                                         \
	echo "TESTS COMPLETE"

# testtools is a special minimal case for an app that just uses GASNet tools
testtools: force
	@CC@ @MISC_CFLAGS@ $(GASNET_INCLUDES) @GASNET_THREAD_DEFINES@ -DHAVE_PTHREAD_H -c -o $@.o $(srcdir)/$@.c
	@CC@ -o $@ $@.o @GASNET_THREAD_LIBS@ @LIBS@ @LIBM@

# some tests need delay.o
testlogGP: delay.o
testlogGP_extraobjs = delay.o
testbarrierlate: delay.o
testbarrierlate_extraobjs = delay.o

# delay function, used by multiple tests
delay.o: force
	$(GASNET_CC) $(GASNET_INCLUDES) -c -o $@ $(srcdir)/$*.c

# testmpi must be compiled like an MPI program with GASNet support
testmpi: force
	@MPI_CC@ -I$(srcdir) $(GASNET_CPPFLAGS) $(GASNET_CFLAGS) @MPI_CFLAGS@ -c -o $@.o $(srcdir)/$@.c
	$(GASNET_MPI_LD) $(GASNET_LDFLAGS) @MPI_CFLAGS@ -o $@ $@.o @MPI_LIBS@ $(GASNET_LIBS)
	

# This is a model for how GASNet clients should be built:
test% : force
	$(GASNET_CC) -I$(srcdir) $(GASNET_CPPFLAGS) $(GASNET_CFLAGS) -c -o $@.o $(srcdir)/$@.c
	$(GASNET_LD) $(GASNET_LDFLAGS) -o $@ $@.o $($@_extraobjs) $(GASNET_LIBS)

force:
	

.PHONY: force all
