#   $Source: /Users/kamil/work/gasnet-cvs2/gasnet/tests/Makefile.in,v $
#     $Date: 2005/05/06 20:12:22 $
# $Revision: 1.64 $
# Description: Makefile for GASNet tests
# @configure_input@
# Copyright 2002, Dan Bonachea <bonachea@cs.berkeley.edu>
# Terms of use are as specified in license.txt

all: 
	@echo This Makefile is not intended to be called directly
	@echo do a "make tests-seq" or "make tests-par" within the conduit directory

# linker to be used for MPI programs
GASNET_MPI_LD = @MPI_CC@

srcdir="@TOP_SRCDIR@/tests"

configfile=/dev/null # must be overridden by caller
include $(configfile)

Makefile: @TOP_SRCDIR@/tests/Makefile.in
	cd @TOP_BUILDDIR@ ; \
	CONFIG_HEADERS= CONFIG_FILES=tests/Makefile ./config.status

# GASNet-related MPI tests
@USE_MPI_CONDUIT_TRUE@ MPI_TESTS_SEQ = 
@USE_MPI_CONDUIT_TRUE@ MPI_TESTS_PAR = testmpi

# non-GASNet plain MPI tests
MPI1_TESTS = 			\
	testmpiperf 		\
	testmpinbr		\
	testosumpi_bw  		\
	testosumpi_bw2 		\
	testosumpi_lat 		\
	testosumpi_bcast_lat 

MPI2_TESTS = 			\
	testosumpi2_put_lat 	\
	testosumpi2_put_bw 	\
	testosumpi2_put_bw2 	\
	testosumpi2_get_lat 	\
	testosumpi2_get_bw 	\
	testosumpi2_acc_lat  	

@USE_MPI_CONDUIT_TRUE@ MPI_TESTS = $(MPI1_TESTS) $(MPI2_TESTS)

# tests that can be built in any mode
# in order of most useful execution
# NOTE: if you add a test here that is expected to pass on all conduits,
#   please also add it to upcr/upc-tests/gasnet-tests/harness.conf
testprograms_seq =      \
        testgasnet      \
        testenv         \
        testsmall       \
        testlarge       \
        testam          \
        testcore1       \
        testbarrier     \
        testlogGP       \
        testvis         \
        testmisc        \
        testalign       \
        testrand        \
        testexit        \
        testhsl         \
        testbarrierconf \
        testbarrierlate \
        testtools       \
        testcoll        \
        testnbr    	\
	testqueue	\
        $(CONDUIT_TESTS) \
        $(MPI_TESTS_SEQ)
  

# tests that should only be built in PARSYNC and PAR modes
testprograms_parsync =  \

# tests that should only be built in PAR mode
testprograms_par =  \
	testthreads \
	testcontend \
	testcas     \
	$(MPI_TESTS_PAR)

testprograms = $(testprograms_seq) $(testprograms_parsync) $(testprograms_par) $(MPI_TESTS)

tests-seq: clean $(testprograms_seq)
	
tests-parsync: clean $(testprograms_seq) $(testprograms_parsync)
	
tests-par: clean $(testprograms_seq) $(testprograms_parsync) $(testprograms_par)
	
tests-mpi: $(MPI1_TESTS)

tests-mpi2: $(MPI2_TESTS)

clean:
	rm -f $(testprograms:=@EXESUFFIX@)

distclean: 
	rm -f Makefile

@GASNET_SEGMENT_FAST_TRUE@GASNET_SEGMENT_STR="FAST"
@GASNET_SEGMENT_LARGE_TRUE@GASNET_SEGMENT_STR="LARGE"
@GASNET_SEGMENT_EVERYTHING_TRUE@GASNET_SEGMENT_STR="EVERYTHING"

@BUILDCONFIG_DEBUG_TRUE@DEBUG_MALLOC=MALLOC_CHECK_=2
TEST_ENV=$(DEBUG_MALLOC)

# default node count
TEST_NODES=2
# provide args and node counts for specific tests, user can override with MANUAL_TESTPARAMS
TEST_PARAMS=                    					\
   testcore1_args="1000";       					\
   testrand_args="1024";        					\
   testlogGP_args="1000 8 65536";					\
   testthreads_args="2";						\
   testmisc_nodes="1";							\
   testbarrierconf_nodes="3";						\
   testmpi_args="2";							\
   testmpiperf_args="BPFE 1000";					\
   testqueue_args="1 256 262144"; 					\
   testenv_args='GASNet is \"Global Address Space Networking\"';	\
   $(CONDUIT_TESTPARAMS) dummy=1 ; 					\
   $(MANUAL_TESTPARAMS) dummy=1 ;

# omit tests that are supposed to fail or known to cause failures
testprograms_err =      \
        testexit        \
        testhsl         \
	$(MPI_TESTS_SEQ) \
	$(MPI_TESTS_PAR)

# tests that do not link libgasnet and should execute directly on the frontend with no spawner
testprograms_nongasnet = \
	testtools

CONDUIT_NAME_UC=`echo $(CONDUIT_NAME) | @AWK@  '{print toupper($$0)}'`
awk_cmdbuild={  qargs="'"'"$$args"'"'"; gsub("'"'"\x22"'"'","'"'"\x5C\x22"'"'",qargs); \
                gsub("'"'"%C"'"'", "'"'"%P %A"'"'");       \
		gsub("'"'"%P"'"'", "'"'"./$$file"'"'");    \
		gsub("'"'"%L"'"'", "'"'"DUMMY"'"'");       \
		gsub("'"'"%V "'"'","'"'""'"'");            \
		gsub("'"'"%N"'"'", "'"'"$$nodes"'"'");     \
		gsub("'"'"%A"'"'", "'"'"$$args"'"'");      \
		gsub("'"'"%Q"'"'", qargs); print }
perl_threadscan=print $$1 if (/\\\$$GASNetThreadModel: GASNET_([^ ]*) \\\$$/);

run-tests: force
	@$(TEST_PARAMS)                                                                 \
	export `echo "$(TEST_PARAMS)" | @AWK@ 'BEGIN {FS="=";RS=";"}{ print $$1 }'` ;   \
	line='+++++++++++++++++++++++++++++++++++++++' ; line="$$line$$line" ;          \
	tests_to_run="" export tests_to_run ;                                           \
	tests_to_ignore="" export tests_to_ignore ;                                     \
	for file in $(testprograms) ; do if test -x "$$file" ; then                     \
	  if test "`echo \"$(testprograms_err)\"| grep $$file ; exit 0`"; then          \
	    tests_to_ignore="$$tests_to_ignore $$file" ;                                \
	  else                                                                          \
	    tests_to_run="$$tests_to_run $$file" ;                                      \
	  fi ;                                                                          \
	fi ; done ;                                                                     \
	echo $$line ;                                                                   \
	echo " Running $(CONDUIT_NAME)-conduit tests:" ;                                \
        if test "$(TESTS)" ; then                                                       \
          tests_to_run="$(TESTS)" ; tests_to_ignore="" ;                                \
	fi ;                                                                            \
	for file in $$tests_to_run ; do echo "   $$file" ; done ;                       \
	if test "$$tests_to_ignore" ; then                                              \
	  echo " Ignoring tests: $$tests_to_ignore" ;                                   \
	fi ;                                                                            \
	echo " If this fails to spawn a job,"                                           \
	     "you may need to re-run with a command like:" ;                            \
	echo "  gmake run-tests $(CONDUIT_NAME_UC)_RUNCMD=\"$(CONDUIT_RUNCMD)\"" ;      \
	echo $$line ;                                                                   \
	TEST_RUNCMD="$$$(CONDUIT_NAME_UC)_RUNCMD" export TEST_RUNCMD ;                  \
	TEST_RUNCMD="`eval echo $$TEST_RUNCMD`" ;                                       \
	if test -z "$$TEST_RUNCMD" ; then                                               \
	  TEST_RUNCMD="$(CONDUIT_RUNCMD)" ;                                             \
	fi ;                                                                            \
	MPI_RUNCMD="$${MPI_RUNCMD:=@MPIRUN_CMD@}" export MPI_RUNCMD ;                   \
	if test -z "$$TIMECMD" ; then                                                   \
	  TIMECMD="@TIMECMD@" ;                                                         \
	fi ;                                                                            \
	for file in $$tests_to_run ; do                                                 \
	    args="$$""$${file}_args" ;                                                  \
	    args="`eval echo $$args`" ;                                                 \
	    nodes="$$\{""$${file}_nodes-$(TEST_NODES)\}" ;                              \
	    nodes="`eval eval echo $$nodes`" ;                                          \
	    if test "`echo \" $(testprograms_nongasnet) \"| grep \" $$file \" ; exit 0`" ; then  \
	      echo "*** Running $(CONDUIT_NAME)-conduit $$file ***" ;                   \
	      cmd="./$$file $$args" ;                                                   \
	    elif test "`echo \" $(MPI_TESTS) \"| grep \" $$file \" ; exit 0`" ; then    \
	      echo "*** Running MPI test $$file ***" ;                                  \
              awk_cmdbuild=`echo "$(awk_cmdbuild)"` ; 					\
	      cmd=`echo "$$MPI_RUNCMD" | eval @AWK@ \'$$awk_cmdbuild\'` ;         	\
	    else                                                                        \
	      threadmode=`@PERL@ -n -e '$(perl_threadscan)'                             \
                          $$file@EXESUFFIX@ 2> /dev/null` ;                             \
	      echo "*** Running $(CONDUIT_NAME)-conduit $$file"                         \
		   "in $$threadmode/$(GASNET_SEGMENT_STR) mode ***" ;                   \
              awk_cmdbuild=`echo "$(awk_cmdbuild)"` ; 					\
	      cmd=`echo "$$TEST_RUNCMD" | eval @AWK@ \'$$awk_cmdbuild\'` ;         	\
	    fi;                                                                         \
	    echo "$$cmd" ;                                                              \
	    eval env GASNET_DUMMY=\"GASNet dummy value\" $(TEST_ENV)                    \
	    $$TIMECMD $$cmd || echo "ERROR: Test exited with failure code=$$?" ;        \
	    echo $$line ;                                                               \
	done ;                                                                          \
	echo "TESTS COMPLETE"

TESTEXIT_SCRIPT=run-testexit
TESTEXIT_SEQMAX=13
TESTEXIT_PARMAX=18
do-run-testexit: force
	@echo "Building $(TESTEXIT_SCRIPT) script..."
	@echo "#!/bin/sh" > $(TESTEXIT_SCRIPT)
	@nodes=$${TEST_NODES-2} ; args="" ; file="testexit" ;             \
         awk_cmdbuild=`echo "$(awk_cmdbuild)"` ; 			  \
         cmd=`echo "$(CONDUIT_RUNCMD)" | eval @AWK@ \'$$awk_cmdbuild\'` ; \
	 echo "INTERACTIVE_RUNCMD='$$cmd'"                        >> $(TESTEXIT_SCRIPT)
	@echo "BATCH_RUNCMD='testexit'"                           >> $(TESTEXIT_SCRIPT)
	@echo '#BATCH_RUNCMD="$$INTERACTIVE_RUNCMD"'              >> $(TESTEXIT_SCRIPT)
	@echo 'if test "$$PBS_O_WORKDIR" ; then '                 >> $(TESTEXIT_SCRIPT)
	@echo '  cd "$$PBS_O_WORKDIR"'                            >> $(TESTEXIT_SCRIPT)
	@echo 'fi'                                                >> $(TESTEXIT_SCRIPT)
	@echo 'if test "$$MP_PROCS" -o "$$PBS_NODEFILE" ; then'   >> $(TESTEXIT_SCRIPT)
	@echo '  RUNCMD="$$BATCH_RUNCMD"'                         >> $(TESTEXIT_SCRIPT)
	@echo "else"                                              >> $(TESTEXIT_SCRIPT)
	@echo '  RUNCMD="$$INTERACTIVE_RUNCMD"'                   >> $(TESTEXIT_SCRIPT)
	@echo "fi"                                                >> $(TESTEXIT_SCRIPT)
	@echo "MALLOC_CHECK_=2; export MALLOC_CHECK_"             >> $(TESTEXIT_SCRIPT)
	@echo 'echo "Starting run-testexit at: `date`"'           >> $(TESTEXIT_SCRIPT)
	@echo 'ID="`hostname`-$$MP_CHILD$$PBS_NODENUM"'           >> $(TESTEXIT_SCRIPT)
	@i=0; \
	 while test "$$i" != "$(TESTEXIT_SEQMAX)" ; do                       \
           i=`expr $$i + 1`;                                                 \
	   echo ""                                   >> $(TESTEXIT_SCRIPT) ; \
	   echo 'echo "$$ID: testexit '$$i'"'        >> $(TESTEXIT_SCRIPT) ; \
	   echo '$$RUNCMD'" $$i"                     >> $(TESTEXIT_SCRIPT) ; \
	   echo 'echo "$$ID: result=$$?"'            >> $(TESTEXIT_SCRIPT) ; \
	   echo "sleep 2"                            >> $(TESTEXIT_SCRIPT) ; \
	 done ; \
	 echo 'threadmode=`@PERL@ -n -e '"'"'$(perl_threadscan)'"'"' ' \
              'testexit@EXESUFFIX@ 2> /dev/null`'      >> $(TESTEXIT_SCRIPT) ; \
	 echo 'if test "$$threadmode" = "SEQ" -o ' \
                   '"$$threadmode" = "PARSYNC" ; then' >> $(TESTEXIT_SCRIPT) ; \
	 echo '  echo "WARNING: testexit was compiled' \
              'in GASNET_$$threadmode mode"'           >> $(TESTEXIT_SCRIPT) ; \
	 echo '  echo "WARNING: be sure to recompile the test in' \
              'GASNET_PAR mode for full results"'      >> $(TESTEXIT_SCRIPT) ; \
	 echo 'else' >> $(TESTEXIT_SCRIPT) ; \
	 while test "$$i" != "$(TESTEXIT_PARMAX)" ; do                       \
           i=`expr $$i + 1`;                                                 \
	   echo ""                                   >> $(TESTEXIT_SCRIPT) ; \
	   echo 'echo "$$ID: testexit '$$i'"'        >> $(TESTEXIT_SCRIPT) ; \
	   echo '$$RUNCMD'" $$i"                     >> $(TESTEXIT_SCRIPT) ; \
	   echo 'echo "$$ID: result=$$?"'            >> $(TESTEXIT_SCRIPT) ; \
	   echo "sleep 2"                            >> $(TESTEXIT_SCRIPT) ; \
	 done ; \
	 echo 'fi' >> $(TESTEXIT_SCRIPT) 
	@echo 'echo "`hostname`: done."'  >> $(TESTEXIT_SCRIPT)
	@chmod +x $(TESTEXIT_SCRIPT)
	@echo "Complete. Starting execution..."
	@./$(TESTEXIT_SCRIPT)


# testtools is a special minimal case for an app that just uses GASNet tools
# specifically, we carefully omit BUILDCONFIG_DEFINES
@BUILDCONFIG_DEBUG_FALSE@ TOOLS_CPPFLAGS = -DNDEBUG
testtools: force
	@CC@ @CFLAGS@ @MISC_CFLAGS@ @MISC_CPPFLAGS@ $(GASNET_INCLUDES) @GASNET_THREAD_DEFINES@ $(TOOLS_CPPFLAGS) $(MANUAL_CFLAGS) -c -o $@.o $(srcdir)/$@.c
	@CC@ @CFLAGS@ @MISC_CFLAGS@ -o $@ $@.o @GASNET_THREAD_LIBS@ @LIBS@ @LIBM@
	rm -f $@.o

# some tests need delay.o
testlogGP: delay.o
testlogGP_extraobjs = delay.o
testbarrierlate: delay.o
testbarrierlate_extraobjs = delay.o

# delay function, used by multiple tests
# need to deliberately exclude optimization for this object file
delay.o: force
	$(GASNET_CC) $(GASNET_INCLUDES) $(GASNET_MISC_CFLAGS) $(MANUAL_CFLAGS) -c -o $@ $(srcdir)/$*.c

# testmpi must be compiled like an MPI program with GASNet support
testmpi: force
	@MPI_CC@ -I$(srcdir) $(GASNET_CPPFLAGS) @MPI_CFLAGS@ $(MANUAL_CFLAGS) -c -o $@.o $(srcdir)/$@.c
	$(GASNET_MPI_LD) $(GASNET_LDFLAGS) @MPI_CFLAGS@ -o $@ $@.o @MPI_LIBS@ $(GASNET_LIBS)
	rm -f $@.o	

# the following are just plain MPI programs
# testmpinbr requires libm
$(MPI_TESTS): force
	@MPI_CC@ -I$(srcdir)/mpi -I@TOP_SRCDIR@/other @MPI_CFLAGS@ $(MANUAL_CFLAGS) -c -o $@.o $(srcdir)/mpi/$@.c
	$(GASNET_MPI_LD) $(GASNET_LDFLAGS) @MPI_CFLAGS@ -o $@ $@.o @MPI_LIBS@ @LIBM@
	rm -f $@.o	

# testcxx tests support for compiling a C++-based GASNet client 
# this is unlikely to work on conduits requiring a special linker (eg mpi-conduit)
testcxx: force
	@CXX@ @CXXFLAGS@ @MISC_CXXFLAGS@ -I$(srcdir) $(GASNET_CPPFLAGS) $(MANUAL_CFLAGS) -c -o $@.o $(srcdir)/$@.cc
	@CXX@ @CXXFLAGS@ $(GASNET_LDFLAGS) -o $@ $@.o $($@_extraobjs) $(GASNET_LIBS)
	rm -f $@.o

# This is a model for how GASNet clients should be built:
test% : force
	$(GASNET_CC) -I$(srcdir) $(GASNET_CPPFLAGS) $(GASNET_CFLAGS) -c -o $@.o $(srcdir)/$@.c
	$(GASNET_LD) $(GASNET_LDFLAGS) -o $@ $@.o $($@_extraobjs) $(GASNET_LIBS)
	rm -f $@.o

force:
	

.PHONY: force all tests-mpi tests-mpi2
