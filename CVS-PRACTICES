GASNet CVS Usage Practices
--------------------------
Development practices that GASNet developers are expected to follow:

* All developers doing commits must be on the upc-devel@lbl.gov email list,
  which receives gasnet checkin messages.

* You must include an explanatory log message for any change. It should describe
  the high-level of what you did, and why you did it (e.g. to solve a particular
  bug, etc). Generally larger changes deserve more detailed log messages -
  remember the idea is to keep other developers apprised of changes you've made
  that could affect their work somehow. Checkin messages should reference any 
  particular bug ID's that they address.

* You should only commit working code - do NOT check in untested or flagrantly
  broken code that could affect system stability. The idea is to ensure the main
  trunk of the repository is mostly-working at all times, so try to make sure
  your commits leave the repository in at least as working a state as you found
  it. I understand that it may not be practical to test a given change on all
  platforms, but you should at least test it throughly on your development
  platform, and any other platforms that you have reason to believe may be
  affected (this is especially true for configure scripts and Makefiles). If you
  wish to checkin intermediate or untested versions of your code, please do so
  on a private branch (see http://www.cvshome.org/docs/manual/cvs_5.html#SEC56).

* Whenever you add _any_ files to the CVS repository, make sure they also
  get added to the Makefile.am file for the enclosing directory (if there is one)
  otherwise your added file won't be included in the public release.

* When in doubt, use a CVS tag. CVS's built-in facilities for retrieving an old,
  consistent snapshot of the entire system are rather poor, and work most smoothly
  when there is a system-wide CVS tag at the point of interest. Developers
  should create a CVS tag with an explanatory name before any major change that
  is likely to affect system stability (eg merging a large development branch),
  before rolling back any non-trivial change, and whenever distributing a
  snapshot of the archive to any user or external party.

* All GASNet developers are required to follow the GASNet coding standards outlined 
  in the top-level README.

GASNet Release Procedure
------------------------

* Start from a clean checkout of the CVS tree

* Increment the version number for each item or software module that has changed
  since the last public release:
  Overall public release version number: configure.in and GASNETI_RELEASE_VERSION
    should be a even minor version number for a public release
  Conduits: */gasnet_core_fwd.h, */gasnet_extended_fwd.h
  GASNet document spec version: docs/gasnet.texi
  Spec conformance major version number: gasnet.h, GASNET_VERSION

* Review checkin messages and write a summary of user-visible changes and 
  bug fixes since last public release - add to ChangeLog

* ./Bootstrap the srcdir

* From a separate builddir, do a configure, then gmake all distcheck to build 
  the release candidate archive

* Unpack the archive and diff against the source tree to find missing files,
  especially documentation and auxilliary files

* Check the spec documents were generated correctly & clean up if necessary 
  (regenerate the .ps on Linux)

* Test the release candidate on all directly supported systems and conduits,
  with both debug-stats-trace and ndebug configs, and all supported backend
  C compilers:
   IBM SP: mpi, lapi - 32 & 64 bit
   AlphaServer-Quadrics: mpi, elan
   Linux-Myrinet: mpi, gm
   Linux-Quadrics: mpi, elan
   Linux-Ethernet: mpi
   Linux-InfiniBand: mpi, vapi
   Linux-Altix: shmem
   Linux-Dolphin: sci
   Origin 2000: mpi - 32 & 64 bit
   Cray X1: mpi, shmem

* Merge with Titanium and test SEGMENT_EVERYTHING functionality 

* Add new version number to Bugzilla

* Post to webpage, update HTML, email release notice with ChangeLog entry

* CVS tag the archive as GASNET_V_v (for version V.v) and docs/gasnet.texi as GASNETSPEC_V_v

* Increment overall public release version number: configure.in and GASNETI_RELEASE_VERSION
   should be a odd minor version number for development versions

