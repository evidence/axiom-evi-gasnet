GASNet Revision Control Practices
---------------------------------
Development practices that GASNet developers are expected to follow:

* All developers doing commits must be on the upc-devel@lbl.gov email list,
  which receives GASNet commit messages.

* You should commit only to the 'develop' branch - do NOT commit to 'master'
  except for stable public releases (may include snapshots, etc. but NOT normal
  day-to-day development work).

* Anything that is not a "trivial" change (such as correcting a typo or a small
  1 or 2 line bug fix) should be performed on a "feature branch" and merged back
  to 'develop' following the git-flow workflow as described in more detail in
  the file README-git.  This allows the "feature" to be developed over multiple
  commits while clearly identifying the start and end of the work, preventing
  interleaving of commits with the work of other developers, and provides a
  commit message that can summarize the purpose of the change(s).

* When merging your feature branch to 'develop' don't include any extra changes
  that might confuse a review, or be lost if your feature must be reverted.  For
  instance if during the merge you notice a bug in the feature, go back to the
  branch and fix it before restarting the merge.  If you encounter a bug, a typo
  or other "issue" in 'develop' that is not related to your feature, then fix it
  either before merging your branch (requiring an additional rebase), or else
  fix it after your merge is completed.

* You must include an explanatory log message for every commit you make.  It
  should describe the high-level of what you did, and why you did it (e.g. to
  solve a particular bug, etc).  Generally larger changes deserve more detailed
  log messages - remember the idea is to keep other developers apprised of
  changes you've made that could affect their work somehow.  Commit messages
  should reference any particular bug ID's that they address.  When doing work
  as multiple commits to a feature branch, this rule applies NOT only to the
  final merge commit, but also to the individual commits on the branch which
  should each be reviewable individually.  Remember that somebody you've never
  met may read your log message years after you write it.  So, make everything
  explicit, avoiding phrases like "Apply Jane's idea from last week's meeting".

* The rule on log messages above applies to anything that will become publicly
  visible.  For your work in a local git repo you are welcome to practice any
  discipline that works for you.  HOWEVER, when it is time to merge work back to
  'develop' one should use git to edit commit messages or squash commits to
  ensure your work meets these standards.  Anything on 'develop' is
  world-visible.

* Our git repository at BitBucket is configure to DENY any history re-writes on
  the 'develop' branch.  This means you cannot 'git amend' or otherwise make
  any modifications to history once you've pushed to 'origin/develop'.  Keep
  this in mind along with the fact that anything you push to the server is
  visible to the entire world.

* You should only commit *working* code to 'develop' - do NOT commit untested or
  flagrantly broken code that could affect system stability.  The idea is to
  ensure the 'develop' branch of the repository is mostly-working at all times.
  So, try to make sure your commits leave the repository in at least as working
  a state as you found it.  We understand that it may not be practical to test
  a given change on all platforms, but you should at least test it thoroughly on
  your development platform, and any other platforms that you have reason to
  believe may be affected (this is especially true for configure scripts and
  Makefiles).

* If you wish to share intermediate or untested versions of your code for review
  or testing by other developers, you can push your feature branch to BitBucket.
  Once there, a Pull Request can be used to provide a forum for review if this
  is desired.  However, we are not currently imposing any formal requirement for
  use of Pull Requests.

* Whenever you "git add" any new (previously untracked) files to the
  repository, make sure they also get added to the Makefile.am file (if any)
  for the enclosing directory.  Otherwise your added file won't be included in
  the public release.  Of course there are files (this developer documentation
  for instance) which we don't distribute, but that is the UNcommon case.

* When we were using CVS, we recommended frequent use of tags, such as any time
  you begin a branch or merge your branch to or from HEAD.  This is not nearly
  as necessary in git because there is always a hash to identify the state of
  the entire repository after any given commit, and tools to find them easily.
  Additionally our use of the git-flow workflow ensures that even after merging,
  the sequence of commits that comprise a given feature branch is easily
  identifiable (and therefore can quickly be reverted or applied to 'master' if
  necessary).  This is not to say that there is NO use for tags with git.  They
  are especially important when you want to be able to correlate points in time
  across multiple repositories (e.g. a GASNet commit which provides a feature
  required for Berkeley UPC).

* GASNet supports both a regular and tools-only (conduit-free) distribution.
  The Bootstrap -o option activates tools-only mode for a given source tree
  by MODIFYING several source files, but the git repo is always kept in regular
  distribution mode. This means if you use tools-only mode, you MUST Bootstrap
  back to regular mode (without -o) before committing any changes to the repo.

* All GASNet developers are required to follow the GASNet coding standards
  outlined in the top-level README.

GASNet Release Procedure
------------------------

* Start from a *clean* clone of the git repo.
  Either start from a NEW clone, or use one of "git clean" or "git stash -o"
  to remove untracked files.  Otherwise it's very easy for stray files to end
  up in the release.

* Under normal circumstances you will generating a release on the 'master'
  branch after use of a "release branch" to merge in all the new work from
  'develop' and update version numbers, etc.  This procedure begins with the
  creation of the "release branch" for a hypothetical 9.8.0 release:
  If using git-flow:
    $ git flow release start 9.8.0
  If NOT using git-flow:
    $ git checkout -b release/9.8.0 develop

[TODO: what if one wants to "publish" the release branch to BitBucket?]

* Increment the version number for each item or software module that has
  changed since the last public release:
  Overall public release version number, in configure.in:
    GASNET_RELEASE_VERSION_MAJOR
    GASNET_RELEASE_VERSION_MINOR
    GASNET_RELEASE_VERSION_PATCH
  - this should be 1.3.x for development, then 1.4.0 for release based on
    1.3.x code (i.e. use odd minor version number for development).
  - For bug-fix release patches, update the patch number for each (ex: 1.4.1).
  - For development, update the patch number whenever it's useful (new feature,
    big bugfix), and/or whenever we put out a new 'stable' release (or hand
    out a snapshot to a user). The patch-level should be even for beta versions
    marked as "stable" for users, or odd for general development.
  GASNet spec version numbers, in configure.in:
    GASNET_SPEC_VERSION_MAJOR - increment on backwards compatibility break
    GASNET_SPEC_VERSION_MINOR - increment for new features that don't break
                                backwards compatibility, zero on MAJOR change
  GASNet tools spec version numbers, in configure.in:
    GASNETT_SPEC_VERSION_MAJOR - increment on backward compatibility break
    GASNETT_SPEC_VERSION_MINOR - increment for new features that don't break
                                 backwards compatibility, zero on MAJOR change
  Conduits: */gasnet_core_fwd.h, */gasnet_extended_fwd.h
  GASNet document spec version: docs/gasnet.texi
  GASNet tools document spec version: README-tools

* Review commit messages and write a summary of user-visible changes and 
  bug fixes since last public release - add to ChangeLog

* Update license.txt with any new authorship credits

* Commit all changes made in the previous steps

* ./Bootstrap the sources

* From a separate builddir, do a configure, then
    $ gmake all distcheck [GASNET_DOCS=PATH_TO_GASNET_DOCUMENTATION]
  the release candidate archive.  See below for info on the optional
  GASNET_DOCS setting.

* Unpack the archive and diff against the source tree to find missing files,
  especially documentation and auxiliary files.  Check that other/contrib
  contains any cross-configure scripts that are intended for distribution.

* Verify that ./unBootstrap removes all generated files:
  In the repository directory:
    $ ./unBootstrap
    $ git status --ignored
  If "git status" listed any "ignored files" then you need to update
  unBootstrap (and if it lists any "untracked files" then you didn't
  start with a clean repo).

* If the spec has not changed since the previous release, consider reusing
  the generated files from a past release.  That can be automated by adding
     GASNET_DOCS=PATH_TO_GASNET_DOCUMENTATION
  to the distcheck step, above.
  Otherwise, check the spec documents were generated correctly & clean up
  if necessary (regenerate the .ps on Linux).

* Test the release candidate on all directly supported systems and conduits,
  with both debug+stats+trace and ndebug configs, and all supported backend
  C compilers:
   IBM BG/P: dcmf (and mpi if time/allocation allows)
   IBM BG/Q: pami (and mpi if time/allocation allows)
   Cray XE: gemini (and mpi if time/allocation allows)
   Cray XC: aries (and mpi if time/allocation allows)
   Linux-Ethernet: mpi, udp
   Linux-InfiniBand: mpi, ibv (and portals4 & mxm, if possible)
   Linux-Altix: smp, shmem
   Windows/Cygwin: smp+pthreads
   Mac OS X: smp+pthreads
  In most cases these test will be conducted as part of Berkeley UPC's
  release testing (the "gasnet-tests" suite of the BUPC test harness).

* Install the release candidate and ensure that share/docs/gasnet contains
  all the intended documentation, including any files referenced by README.
  Any missing should be added to INSTALL_DOCS in the top-level Makefile.am

* Resolutions for any "issues" (bugs, missing docs, etc.) should be fixed
  on the release branch and re-tested as necessary.  These will be merged
  back to 'develop' at the end of this procedure.  However, if there is
  something critical, it can be cherry-picked to 'develop' without any
  problems (git is smart enough to deal with this at the later merge step).

* Clone a *second* copy of the repository for the tools-only distribution:
    $ git clone --branch release/9.8.0 \
            https://bitbucket.org/berkeleylab/gasnet gasnet-tools
    $ cd gasnet-tools
    $ ./Bootstrap -o
  make a separate build directory, configure and "gmake all distcheck"
  to build the tools-only tarball.
  The use of the URL for anonymous access to BitBucket is INTENTIONAL,
  so that you cannot accidentally commit the re-writes done by the
  "-o" option to ./Bootstrap.

* Merge with Titanium and test SEGMENT_EVERYTHING functionality 

* Iterate the appropriate steps above until you have final release
  tarballs for both GASNet and GASNet_Tools

* Advanced warning #1:
  If there were any "hot fixes" on 'master' since the previous release
  then you will may need to resolve conflicts in the "git flow finish ..." or
  "git merge ..." step below.  If you are motivated to accept any conflict
  resolution other than "-X theirs" (meaning: "use the release branch in the
  case of all conflicts") then you should abort the merge and resolve the
  conflict through changes to the release branch (and generate new tarballs).

[TODO: need explicit commands for reverse-the-revert below]
* Advanced warning #2:
  In the event that any feature on 'develop' was reverted on the release branch
  (e.g. due to test failures) but you wish to retain the feature on 'develop',
  you will need to take extra steps to deal with this.  If using git-flow then
  your only opportunity is to fix things up on 'develop' after the "git flow
  finish ..." but before the "git push ...".  If not using git-flow, then the
  preferred sequence would be to fix things up on the release branch after is is
  merge to 'master' but before it is merged to 'develop'.  This is preferred
  because is keeps the "messy bits" of history off the main-line of 'develop'.

* Advanced warning #3:
  Git-flow is not magical.  If it encounters a merge conflict it will (as far
  as I can tell) just give up, leaving you to not only resolve the conflict but
  to complete the remainder of the steps as well (using plain git).

* Now merge the release branch to 'master' (where the general public will
  expect to find sources intended for general consumption), tag the release,
  merge back to 'develop' as well, and delete the transient release branch.
  With git-flow this one step:
    $ git flow release finish -m "GASNet release 9.8.0" 9.8.0
  Without git-flow it is six:
    $ git checkout master
    $ git merge --edit --no-ff release/9.8.0
    $ git tag -a gasnet-9.8.0 -m "GASNet release 9.8.0" master
    $ git checkout develop
    $ git merge --edit --no-ff release/9.8.0
    $ git branch -d release/9.8.0

[TODO: extra cleanup if the release branch was "published" to BitBucket]

* If the GASNet spec version has changed, it needs a tag too:
    $ git tag -a gasnetspec-2.1 -m "GASNet specification 2.1" master

* If this GASNet release has a paired Berkeley UPC release, then one should
  apply a tag to mark the correlation:
    $ git tag berkeley-upc-2.34.0 master
  We avoid using an annotated tag here so that "git describe" won't use it.

* Check carefully that everything is exactly as you wish before you push:
    $ git push --tags origin develop master
  This is the only step of this entire procedure that cannot be undone.

[TODO: do we need to generate new tarballs, or will the "-X theirs" discipline
 be enough to ensure identical contents?]

* On 'develop' advance the version numbers in configure.in (odd minor and patch
  numbers for development).  Please resist the urge to make this change right
  after creating the release branch.  While that might seem logical (it
  certainly does to me), it will cause an entirely unnecessary merge conflict
  at the "finish" step.

* In Bugzilla (before publishing the release):
  + Add the version number of this release
  + Add a milestone for the next release

* In gasnet-web CVS repository:
  + Add both tarballs (GASNet and GASNet_Tools) to CVS
  + Update index.html for the new release
    Minimum update is new versions and MD5s for the tarballs

* On the gasnet.lbl.gov and gasnet.cs.berkeley.edu servers:
  + "cvs up" to get the new tarballs and index.html
  + "tar xfz ..." to extract the new GASNet release (not Tools)
  + Move the "dist" symlink:
    $ ln -sf GASNet-9.8.0 dist

* Email a release notice with the most recent ChangeLog entry

* In Bugzilla CLOSE the bugs resolved in this release (not time critical).
  BUPC's release procedure contains recommended text for the bug closures.
