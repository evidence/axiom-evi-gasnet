GASNet Revision Control Practices
---------------------------------
Development practices that GASNet developers are expected to follow:

* All developers doing commits must be on the upc-devel@lbl.gov email list,
  which receives gasnet commit messages.

* You should commit only to the 'develop' branch - do NOT commit to 'master'
  except for stable public releases (may include snapshots, etc. but NOT normal
  day-to-day development work).

* Anything that is not a "trivial" change (such as correcting a typo or a small
  1 or 2 line bug fix) should be performed on a "feature branch" and merged back
  to 'develop' following the gitflow workflow as described in more detail in
  the file README-git.  This allows the "feature" to be developed over multiple
  commits while clearly identifying the start and end of the work, preventing
  interleaving of commits with the work of other developers, and provides a
  commit message that can summarize the purpose of the change(s).

* When merging your feature branch to 'develop' don't include any extra changes
  that might confuse a review, or be lost if your feature must be reverted.  For
  instance if during the merge you notice a bug in the feature, go back to the
  branch and fix it before restarting the merge.  If you encounter a bug, a typo
  or other "issue" in 'develop' that is not related to your feature, then fix it
  either before merging your branch (requiring an additional rebase), or else
  fix it after your merge is completed.

* You must include an explanatory log message for every commit you make.  It
  should describe the high-level of what you did, and why you did it (e.g. to
  solve a particular bug, etc).  Generally larger changes deserve more detailed
  log messages - remember the idea is to keep other developers apprised of
  changes you've made that could affect their work somehow.  Commit messages
  should reference any particular bug ID's that they address.  When doing work
  as multiple commits to a feature branch, this rule applies NOT only to the
  final merge commit, but also to the individual commits on the branch which
  should each be reviewable individually.  Remember that somebody you've never
  met may read your log message years after you write it.  So, make everything
  explicit, avoiding phrases like "Apply Jane's idea from last week's meeting".

* The rule on log messages above applies to anything that will become publicly
  visible.  For your own work in a local Git repo you are welcome practice any
  discipline that works for you.  HOWEVER, when it is time to merge work back to
  'develop' one should use Git to edit commit messages or squash commits to
  ensure your work meets these standards.  Anything on 'develop' is
  world-visible.

* Our git repository at Bitbucket is configure to DENY any history re-writes on
  the 'develop' branch.  This means you cannot 'git amend' or otherwise make
  any modifications to history once you've pushed to 'origin/develop'.  Keep
  this in mind along with the fact that anything you push to the server is
  visible to the entire world.

* You should only commit *working* code to 'develop' - do NOT commit untested or
  of flagrantly broken code that could affect system stability.  The idea is to
  ensure the 'develop' branch of the repository is mostly-working at all times.
  So, try to make sure your commits leave the repository in at least as working
  a state as you found it.  We understand that it may not be practical to test
  a given change on all platforms, but you should at least test it thoroughly on
  your development platform, and any other platforms that you have reason to
  believe may be affected (this is especially true for configure scripts and
  Makefiles).

* If you wish to share intermediate or untested versions of your code for review
  or testing by other developers, you can push your feature branch to Bitbucket.
  Once there, a Pull Request can be used to provide a forum for review if this
  is desired.  However, we are not currently imposing any formal requirement for
  use of Pull Requests.

* Whenever you "git add" any files to the repository, make sure they also get
  added to the Makefile.am file (if any) for the enclosing directory.  Otherwise
  your added file won't be included in the public release.

* When we were using CVS, we recommended frequent use of tags, such as any time
  you begin a branch or merge your branch to or from HEAD.  This is not nearly
  as necessary in Git because there is always a hash to identify the state of
  the entire repository after any given commit, and tools to find them easily.
  Additionally our use of the gitflow workflow ensures that even after merging,
  the sequence of commits that comprise a given feature branch is easily
  identifiable (and therefore can quickly be reverted or applied to 'master' if
  necessary).  This is not to say that there is NO use for tags with Git.  They
  are especially important when you want to be able to correlate points in time
  across multiple repositories (e.g. a gasnet commit which provides a feature
  required for Berkeley UPC).

* GASNet supports both a regular and tools-only (conduit-free) distribution.
  The Bootstrap -o option activates tools-only mode for a given source tree
  by MODIFYING several source files, but the Git repo is always kept in regular
  distribution mode. This means if you use tools-only mode, you MUST Bootstrap
  back to regular mode (without -o) before committing any changes to the repo.

* All GASNet developers are required to follow the GASNet coding standards
  outlined in the top-level README.

GASNet Release Procedure
------------------------

XXX: This section needs a big rewrite for Git.

* Start from a clean checkout of the CVS tree.
  Do *NOT* use an existing source tree - otherwise it's very easy for stray files,
  bad keywords, etc to end up in the release.
  Use the "-P" option to prune empty dirs (eg "cvs -f co -P ...")
  The "-f" ensures we don't pickup any undesired options from ~/.cvsrc

* Increment the version number for each item or software module that has changed
  since the last public release:
  Overall public release version number, in configure.in:
    GASNET_RELEASE_VERSION_MAJOR
    GASNET_RELEASE_VERSION_MINOR
    GASNET_RELEASE_VERSION_PATCH
  - this should be 1.3.x for development, then 1.4.0 for release based on
    1.3.x code (i.e. use odd minor version number for development).
  - For bug-fix release patches, update the patch number for each (ex: 1.4.1).
  - For development, update the patch number whenever it's useful (new feature, big
    bugfix), and/or whenever we put out a new 'stable' release (or hand
    out a snapshot to a user). The patch-level should be even for beta versions
    marked as "stable" for users, or odd for general development.
  GASNet spec version numbers, in configure.in:
    GASNET_SPEC_VERSION_MAJOR - increment on back-compat break
    GASNET_SPEC_VERSION_MINOR - increment for new features that don't break back-compat
  GASNet tools spec version numbers, in configure.in:
    GASNETT_SPEC_VERSION_MAJOR - increment on back-compat break
    GASNETT_SPEC_VERSION_MINOR - increment for new features that don't break back-compat
  Conduits: */gasnet_core_fwd.h, */gasnet_extended_fwd.h
  GASNet document spec version: docs/gasnet.texi
  GASNet tools document spec version: README-tools

* Review checkin messages and write a summary of user-visible changes and 
  bug fixes since last public release - add to ChangeLog

* Update license.txt with any new authorship credits

* ./Bootstrap the srcdir

* From a separate builddir, do a configure, then
     gmake all distcheck [GASNET_DOCS=PATH_TO_GASNET_DOCUMENTATION]
  the release candidate archive.  See below for info on the optional
  GASNET_DOCS setting.

* Unpack the archive and diff against the source tree to find missing files,
  especially documentation and auxiliary files.  Check that other/contrib
  contains any cross-configure scripts that are intended for distribution.

* Verify that ./unBootstrap removes all generated files:
  In the srcdir:
    ./unBootstrap
    cvs up -P | grep ^?
  If there is any output then you'll need to update unBootstrap.

* Check the spec documents were generated correctly & clean up if necessary 
  (regenerate the .ps on Linux)
  If the spec has not changed since the previous release, consider reusing
  the generated files.  That can be automated by adding
     GASNET_DOCS=PATH_TO_GASNET_DOCUMENTATION
  to the distcheck step.

* Test the release candidate on all directly supported systems and conduits,
  with both debug-stats-trace and ndebug configs, and all supported backend
  C compilers:
   IBM BG/P: dcmf (and mpi if time/allocation allows)
   IBM BG/Q: pami (and mpi if time/allocation allows)
   Cray XE: gemini (and mpi if time/allocation allows)
   Cray XC: aries (and mpi if time/allocation allows)
   Linux-Ethernet: mpi, udp
   Linux-InfiniBand: mpi, ibv (and portals4 & mxm, if possible)
   Linux-Altix: smp, shmem
   Windows/Cygwin: smp+pthreads
   Mac OS X: smp+pthreads
  In most cases these test will be conducted as part of Berkeley UPC's
  release testing (the "gasnet-tests" suite of the BUPC test harness).

* Install the release candidate and ensure that share/docs/gasnet contains
  all the intended documentation, including any files referenced by README.
  Any missing should be added to INSTALL_DOCS in the top-level Makefile.am

* Check out a second source directory for tools-only distribution
  bootstrap with: ./Bootstrap -o
  make a separate build directory, configure and gmake all distcheck
  to build the tools-only tarball

* Merge with Titanium and test SEGMENT_EVERYTHING functionality 

* Add new version number to Bugzilla

* Post to webpage, update HTML, email release notice with ChangeLog entry

* CVS tag the archive as GASNET_V_v (for version V.v) and docs/gasnet.texi as GASNETSPEC_V_v

* Increment overall public release version number in configure.in
   should be a odd minor and patch version number for development versions

