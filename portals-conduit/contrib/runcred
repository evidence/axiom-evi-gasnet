#!/bin/bash

DASHLINE="================================================================================"
NPROCS=8
MYENV=""
ENVSTR=""
YOD=yod
MODEFLAG="-SN"
YODFLAGS=""
TESTING=0
TOPDIR=$(pwd)
PROG=$TOPDIR/testcred
DEFAULT_PARTNERS=2
DEFAULT_MSGSZ=10240
DEFAULT_STEPS=10
DSTR=$(date "+%y%m%d_%H%M%S")
DOIT=""
DEBUGENV=""
MEMENV=""
MIN_CREDIT=8
MAX_CPN=400
NUM_SUBCYCLE=1
DATA_COPY=""
JOBNAME="RUNCRED"
RUN_PEAK_BW=0
RUN_NO_DC=0
RUN_BIGBANK=0
RUN_DCTEST=0

while getopts "AB:CD:P:L:S:TN:VabcdM:J:X:Z:" opt
do
  case $opt in
      A) echo "Will run All tests"
         RUN_PEAK_BW=1
         RUN_NO_DC=1
         RUN_BIGBANK=1
         RUN_DCTEST=1;;
      a) RUN_PEAK_BW=1
         echo "Will Run Peak Bandwidth Test";;
      b) RUN_NO_DC=1
         echo "Will Run No_Dynamic_Credit test";;
      c) RUN_BIGBANK=1
         echo "Will Run BIGBANK test";;
      d) RUN_DCTEST=1
         echo "Will Run Dynamic_Credit test";;
      B) NUM_SUBCYCLE=$OPTARG;;
      C) DATA_COPY="-c";;
      D) DEBUGENV="GASNET_PORTAL_DEBUG_NODE=$OPTARG";;
      J) JOBNAME=$OPTARG;;
      T) TESTING=1
         DOIT="echo";;
      V) MODEFLAG="-VN";;
      P) DEFAULT_PARTNERS=$OPTARG;;
      L) DEFAULT_MSGSZ=$OPTARG;;
      S) DEFAULT_STEPS=$OPTARG;;
      N) echo "RUNNING WITH $OPTARG PROCESSES"
         NPROCS=$OPTARG;;
      M) MIN_CREDIT=$OPTARG;;
      X) MAX_CPN=$OPTARG;;
      Z) MEMENV="GASNET_MAX_SEGSIZE=$OPTARG";;
      *) echo "Unknown Option $opt"
	  exit 1
	  ;;
      esac
done
LAUNCH="$YOD -np $NPROCS $MODEFLAG"


RUNDIR=${TOPDIR}/${JOBNAME}_${DSTR}
mkdir $RUNDIR
cd $RUNDIR

RUNOUT=${JOBNAME}.txt
rm -rf $RUNOUT

#----------------------------------------------------------------------
# convieninece functions to set GASNet env vars
# they either clear MYENV or append to it.

function myecho() {
    echo "$*" | tee -a $RUNOUT
#    echo "$*" 
}
function reset_env() {
    MYENV="$DEBUGENV $MEMENV"
}
function set_segsize() {
    MYENV="$MYENV GASNET_MAX_SEGSIZE=$1"
}
function set_env() {
    MYENV="$MYENV GASNET_PORTAL_$1=$2"
}
function set_fc() {
    set_env FLOW_CONTROL $1
}
function set_dc() {
    set_env DYNAMIC_CREDITS $1
}
function set_epoch() {
    set_env EPOCH_DURATION $1
}
function set_cpn() {
    set_env CRED_PER_NODE $1
}
function set_max_cpn() {
    set_env MAX_CRED_PER_NODE $1
}
function set_banked() {
    set_env BANKED_CREDITS $1
}
function set_amrecv() {
    set_env AMRECV_SPACE $1
}

#---------------------------------------------------------------------
# Problem setups

function setup_nofc() {
    recvsz=$1
    reset_env
    set_fc 0
    set_amrecv $1
    myecho "env: $MYENV"
}

function setup_nobank() {
    reset_env
    set_banked 0
}
function mv_files() {
    dir=$1
    shift 1
    if [ -z $dir ]; then
	myecho "mv_files: must supply dirname"
	exit 1
    fi
    if [ ! -d "$dir" ]; then
	myecho "mv_files: dir=$dir does not exist"
	exit 1
    fi
    if [[ $# -eq 0 ]]; then
	myecho "mv_files: no files to move"
	exit 1
    fi
    for file in $@
    do
	if [ -e $file ]; then
	    myecho "Moving $file to $dir"
	    mv $file $dir
	else
	    myecho "mv_files: No such file: $file"
        fi
    done
}

# testing
if [[ $TESTING -eq 10 ]]; then
    TDIR=junkdir
    FILES="file1 file2 file3"
    mkdir $TDIR
    touch file1 file2
    mv_files $TDIR $FILES
    exit 0
fi

function runjob() {
    OUTFILE=$1
    shift 1
    CMD="$LAUNCH $PROG $* ${DATA_COPY}"
    myecho "Running [env $MYENV $CMD]"
    if [[ $TESTING -ne 0 ]]; then
       return
    fi
    env $MYENV $CMD | tee $OUTFILE | tee -a $RUNOUT
}

#---------------------------------------------------------------------
# this series of tests determines the peak BW from AMMedium floods
# with out flow control.  This should serve as the benchmark against
# which the others can be judged.

function run_peakbw() {
    method=$1
    msgsz=$2
    testname="peak_bw"

    myecho $DASHLINE
    myecho Running $testname : Peak Bandwidth test with no flow control and $method
    reset_env
    set_fc 0
    set_amrecv 4M

    rm -rf initial_vals credits.*
    SUBDIR="${testname}_${method}"
    OUTFILE="${SUBDIR}.txt"
    runjob $OUTFILE -l $msgsz -s ${DEFAULT_STEPS} -n ${DEFAULT_PARTNERS} -m $method 
    $DOIT mkdir $SUBDIR
    $DOIT mv_files $SUBDIR $OUTFILE initial_vals credits.*
}

# Should we set the number of partners?
if [[ $RUN_PEAK_BW -eq 1 ]] ; then
    myecho ""
    size=${DEFAULT_MSGSZ}
    run_peakbw  oddpoll $size
    run_peakbw  pairs   $size
    run_peakbw  chain   $size
    size=
fi

#---------------------------------------------------------------------
# One series of tests disables dynamic flow control and sets a strict
# limit on the number of credits per node.  Each even node is a sender
# to an odd numbered partner who simply polls.  Here, we vary the number
# of credits per run and see where the message rate saturates.  Should be
# where the number of credits satisfied the bandwidth delay product.

function run_nodc() {
    msgsz=$1
    cpn=$2
    testname="lowcred_nodc"

    myecho $DASHLINE
    myecho Running $testname : Bandwidth test, no dynamic credit management, $cpn credits per node
    reset_env
    set_dc 0
    set_banked 0
    set_cpn $cpn
    rm -rf initial_vals credits.*
    SUBDIR="${testname}_${cpn}"
    OUTFILE="${SUBDIR}.txt"
    runjob $OUTFILE -l $msgsz -s ${DEFAULT_STEPS} -n ${DEFAULT_PARTNERS} -m oddpoll 
    $DOIT mkdir $SUBDIR
    $DOIT mv_files $SUBDIR $OUTFILE initial_vals credits.*
}
if [[ $MIN_CREDIT -eq 8 ]] ; then
    NODC_SIZES="8 16 24 32 40 48 56 64 72 80 88 96 104"
else
    NODC_SIZES="4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 100"
fi

if [[ $RUN_NO_DC -eq 1 ]] ; then
    myecho ""
    size=${DEFAULT_MSGSZ}
    for CRED in ${NODC_SIZES}
    do
       run_nodc $size $CRED
    done
    size=
fi

#---------------------------------------------------------------------
# This series of tests enables dynamic credit management but allocates
# the minimal number of credits per node and a large bank pool.  It will
# then run many steps with a small msgsize per step.
# The intent is to see how long it takes for a node to gather enough
# credits to obtain peak bandwidth.

function run_bigbank() {
    msgsz=$1
    steps=$2
    npartner=$3
    banksize=$4
    method=$5
    testname="bigbank"

    myecho $DASHLINE
    myecho Running $testname : Bandwidth test, $MIN CREDIT cpn, banksize=$banksize numstep=$steps msgsz=$msgsz
    reset_env
    set_dc 1
    set_banked $banksize
    set_cpn $MIN_CREDIT
    rm -rf initial_vals credits.*
    SUBDIR="${testname}_${method}_${banksize}"
    OUTFILE="${SUBDIR}.txt"
    runjob $OUTFILE -l $msgsz -s $steps -n $npartner -m $method
    $DOIT mkdir $SUBDIR
    $DOIT mv_files $SUBDIR $OUTFILE initial_vals credits.*
}

if [[ $RUN_BIGBANK -eq 1 ]] ; then
    myecho ""
    size=$DEFAULT_MSGSZ
    nstep=$DEFAULT_STEPS
    npartner=1
    run_bigbank $size $nstep $npartner 200 oddpoll
    run_bigbank $size $nstep $npartner 1000 oddpoll
    size=
    nstep=
    npartner=
fi

#---------------------------------------------------------------------
# Another series of tests sees how well the dynamic credit management
# works in a low-credit situation.  Each node is given the minimal number
# of credits and a small, but fixed bank pool.  How quickly are the credits
# migrated to the proper node?  Run the test multiple times increasing the
# message length, thereby increasing the number of AMMediums sent and therefore
# the more opportunity for credits to migrate.

function run_dctest() {
    method=$1
    msgsz=$2
    banked=$3
    testname="dctest"

    myecho $DASHLINE
    myecho Running $testname : Dynamic cred test with min cpn and $banked banked credits
    reset_env
    set_cpn $MIN_CREDIT
    set_banked $banked
    
    rm -rf initial_vals credits.*
    SUBDIR="${testname}_${method}_${msgsz}_${banked}"
    OUTFILE="${SUBDIR}.txt"
    runjob $OUTFILE -l $msgsz -s ${DEFAULT_STEPS} -m $method -n ${DEFAULT_PARTNERS} -b ${NUM_SUBCYCLE}
    $DOIT mkdir $SUBDIR
#    $DOIT cp $OUTFILE $SUBDIR
    $DOIT mv_files $SUBDIR $OUTFILE initial_vals credits.*
}

# Should we set the number of partners?
if [[ $RUN_DCTEST -eq 1 ]] ; then
    myecho ""
    size=${DEFAULT_MSGSZ}
    run_dctest  oddpoll  $size  40
#    run_dctest  oddpoll  $size  60
#    run_dctest  oddpoll  $size  80
#    run_dctest  pairs    $size  200
#    run_dctest  chain    $size  200
    size=
fi
#---------------------------------------------------------------------


#---------------------------------------------------------------------
exit 0



