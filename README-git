This is the README.git file for GASNet

A note on proprietary (NDA) information:
  A stern reminder that a "git clone" includes the entire
  history of everything that has ever existed in the public
  repo, and that this public repo is world readable.
  So, you must NEVER "git push" anything to the public
  server (even to a private branch that might be merged)
  that you don't have the rights to publish.
  A detailed "protocol" for dealing with proprietary data
  (especially that with an expiration date) will eventually
  be added to this document.

This documentation was written using git-1.8.
Where known, alternatives required for git-1.7 are included.
No effort has been expended to back-port to older git releases.
If future versions of git break these instructions, we'll update
this document appropriately.

The GASNet project is following the gitflow workflow.
See http://nvie.com/posts/a-successful-git-branching-model/
The basic ideas:
 + A long-lived "master" branch to hold public releases, and
   should generally have a tag for each commit.
   This is the default branch for most users.
 + A long-lived "develop" branch for continuous integration.
   This is the branch developers should be committing to.
 + Feature branches (off of develop) for work on each task,
   which are merged to develop when only when completed/tested.
 + Release integration branches (off of develop) which are
   merged to BOTH develop and master when completed.
 + Hot fix branches (from master), which should be rare.
 + All branch merges are done with --no-ff to preserve a clear
   start and end to the commits from each feature branch.
   

Explanation regarding merges of feature branches:

When merging feature branches to develop, we want a (nearly)
linear history, but want to be able to clearly see the start
and end of the sequence of commits which correspond to any
given feature branch.  So, we want a "true merge" with a commit
which is a summary of the branch (bug fix, enhancement, etc.)
which is being merged.  Therefore, we do NOT want a fast-forward
but still require a rebase prior to merging to keep a linear
history:
  git rebase [-i] develop [branch-name]
  git checkout develop
  git merge [--log] --edit --no-ff branch-name
  git branch -d branch-name
  git push
Notes on the rebase step:
  -i     Optionally perform rebase interactively, which allows
         one to squash commits if desired.
  If branch-name is omitted then this command merges HEAD.
Notes on the merge step:
  --log  Optionally seeds the commit message with the summary
         (first line) of each of the constituent commits.
  --edit Required so one can edit the commit message to write
         a description of the work being merged.
The --edit flag to "git merge" doesn't exist in git-1.7, but
it can be simulated by using a two-step merge+commit:
  git merge [--log] --no-commit --no-ff branch-name
  git commit
which invokes the editor at the commit step.

So, what happens on a push failure above (race against a peer)?
When your post-merge "git push" fails with
  ! [rejected]        develop -> develop (non-fast-forward)
You should fetch and then rebase the merge onto an up-to-date
develop:
  git fetch
  git rebase -p [origin/develop develop]
  git push
That "-p" is vital to preserving the branch structure we are
trying to achieve, and is the reason that we should not use
the more common "git pull --rebase".  See a better description
of the problem(s) with pull at https://coderwall.com/p/jiswdq
The rebase arguments "origin/develop develop" are optional for
git-1.8, but are required with git-1.7.

One downside is that if you delay removing the feature branch
until after the (failed) push, you must use "-D" instead of "-d":
  git branch -D branch-name
because the "rebase -p" results in git not realizing that your
branch has been fully merged.

Note that the fetch+rebase-p approach will preserve the branch
structure even if you have merged multiple local branches to
your local develop since the last fetch or pull.  This is a
good thing if you need to work disconnected for an extended
period.


For a release branch we again want a non-fast-forward commit, but
will NOT rebase (because we explicitly branched to keep subsequent
changes on develop from entering the release).
  git checkout -b release-9.8.0 develop
  [prepare the release]
  git checkout master
  git merge --edit --no-ff release-9.8.0
  git push
  git tag -a ganet-9.8.0 -m "GASNet release 9.8.0" master
  git push --tags
  git checkout develop
  git merge --edit --no-ff release-9.8.0
  git push
  git branch -d release-9.8.0
"[prepare the release]" is covered in more detail in README-devel.
If using git-1.7 there is no support for "merge --edit"; see the text
regarding merging feature branches for the merge+commit alternative.


Identification:

You probably want to start with the following to configure your name
and email before doing much of anything:
  git config --global user.name "Jane Doe"
  git config --global user.email "JDoe@lbl.gov"
Omit "--global" if you want to do this for ONLY the current repo.
