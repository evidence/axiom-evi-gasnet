* * * 05/11/2004
* This implementation does not yet take advantage of the new
  features provided in the (PE 4.1) implementation of LAPI.

* It appears there is a bug in the new LAPI, at least on power 4
  systems with the Federation switch.  On such systems, LAPI_Qenv
  claims a max uhdr size of 1956 bytes but using an active message
  uhdr size larger than 932 bytes seems to cause a segmentation
  violation.  To get around this, you must compile with:

  make CONDUIT_EXTRALIBCFLAGS="-DGASNET_LAPI_UHDR_WORKAROUND"

  This will force a reset of the max lapi uhdr size to 932 bytes.
   

* * * 12/06/2002

Complete:
========
* Working implementation of LAPI conduit, core and extended API.

* Works with GASNET_PAR.  No point in using anything else
  on SP since we need locking between client and LAPI threads anyhow.
  Has been tested and appears to work with SEQ and PARSYNC.

* optimizations for AM
   - uhdr (token) buffer pool to reduce calls to malloc/free
   - Execution of REPLY handler in LAPI header handler, when possible.
   - Pack medium/large data into uhdr (token)
   - re-use of tokens when executing replies in request handlers.
   - Use of request queue for requests that have all  of their
     data when the header handler runs.  These request tokens are
     put on a queue.  AMPoll will attempt to drain this queue
     after a call to probe.  these requests may also be executed
     in the completion handler, whichever executes first.
     This reduced latencies by 30-40 usec to 65 usec for some polling apps.
   - Implemented a simple spinlock for queue management in token
     freelist and request queue.

* Loopback working

* All GASNET_SEGMENT types (FAST, LARGE, EVERYTHING compile
  and appear to work.

* Extended API implemented without any CORE AM calls.  Only 
  LAPI calls.

* Can specify LAPI POLLING mode by defining environment variable:
  GASNET_LAPI_MODE=POLLING (all upper case)

ToDo List
=========
* BUGS:  Got a SEGV during a testlarge when using extended API over the 
  GASNET CORE.  If set MAX_MEDIUM to 740 and run testlarge 5000, when
  it attempts to get_nbi 5000 64K messages this requires to remote
  task to send over 300000 medium replies.  We get a segv on the 
  receiving task.  I can't tell if we are seeing a LAPI-conduit bug
  of if we have over-run some internal LAPI limit.  If we up the
  size of MAX_MEDIUM to a more reasonable 16K, the code runs without
  problems.

* Compile and test in 64 bit mode.
  NOTE: Started this.  Must figure out how to tell the confirure
  script how to add "-q64" to CFLAGS in Makefiles and how to
  run the configure compile tests with -q64.  
  Currently, I run configure, hand edit gasnet_config.h to define
  the proper SIZEOF macros and edit the Makefiles to add the
  -q64 option to CFLAGS and the '-X 32_64" option to the archive
  commands (to create the libraries).
  Got things to compile and run the test suite in 64 bit mode
  using the LAPI extended API.  When trying to use the extended-ref
  over the LAPI core, testcore either hung or hit an infinite loop.

* CLEANUP of barrier code in extended api:
  - remove extranious fields of barrier_uhdr structure
  - time barrier calls and try a fat-tree based boradcast
  - If master is waiting on barrier, don't schedule a completion
    handler, let master issue Amsend calls to complete barrier.  
    Do similar trick to AM request token queue?  Possibility of
    using AIX atomic ops to signal these cases without locking?
