* * * 12/06/2002

Complete:
========
* Working implementation of LAPI conduit, core and extended API.

* Works with GASNET_PAR.  No point in using anything else
  on SP since we need locking between client and LAPI threads anyhow.
  Has been tested and appears to work with SEQ and PARSYNC.

* optimizations for AM
   - uhdr (token) buffer pool to reduce calls to malloc/free
   - Execution of REPLY handler in LAPI header handler, when possible.
   - Pack medium/large data into uhdr (token)
   - re-use of tokens when executing replies in request handlers.
   - Use of request queue for requests that have all  of their
     data when the header handler runs.  These request tokens are
     put on a queue.  AMPoll will attempt to drain this queue
     after a call to probe.  these requests may also be executed
     in the completion handler, whichever executes first.
     This reduced latencies by 30-40 usec to 65 usec for some polling apps.
   - Implemented a simple spinlock for queue management in token
     freelist and request queue.

* Loopback working

* All GASNET_SEGMENT types (FAST, LARGE, EVERYTHING compile
  and appear to work.

* Extended API implemented without any CORE AM calls.  Only 
  LAPI calls.

* Can specify LAPI POLLING mode by defining environment variable:
  GASNET_LAPI_MODE=POLLING (all upper case)

ToDo List
=========
* BUGS:  Got a SEGV during a testlarge when using extended API over the 
  GASNET CORE.  This happened once, but unable to re-produce it.
  Is there still a spinlock problem with the token (uhdr) freelist code?
  Note that this test has the effect of issuing a LARGE number of medium
  AM calls because get target buffer is not within access region.
  We see 70000 uhdr (tokens) in use at a time.  They are only allocated
  in lots of 256 tokens each so thats a ton of additional allocation.
  Generally, we will use the extended API using direct LAPI calls and
  so this will not be an issue.

* Cleanup max medium message size code.

* CLEANUP of barrier code in extended api:
  - remove extranious fields of barrier_uhdr structure
  - time barrier calls and try a fat-tree based boradcast
  - If master is waiting on barrier, don't schedule a completion
    handler, let master issue Amsend calls to complete barrier.  
    Do similar trick to AM request token queue?  Possibility of
    using AIX atomic ops to signal these cases without locking?
