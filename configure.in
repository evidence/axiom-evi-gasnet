dnl -*- m4 -*-

#  $Archive:: /Ti/AMMPI/Makefile                                         $
#     $Date: 2002/10/01 11:18:29 $
# $Revision: 1.22 $
# Description: GASNet configure script
# Copyright 2002, Dan Bonachea <bonachea@cs.berkeley.edu>
# Based in part on the Titanium project configure script
AC_REVISION($Revision: 1.22 $)

# the "new" way
# AC_INIT(GASNet, 0.2)
# AC_CONFIG_SRCDIR(gasnet.h)
# AM_INIT_AUTOMAKE([no-define])

# the "old" way
AC_INIT(gasnet.h)
GASNET_FIX_SHELL
AC_CONFIG_AUX_DIR(config-aux)
 
AC_CANONICAL_SYSTEM
AC_VALIDATE_CACHED_SYSTEM_TUPLE
AM_INIT_AUTOMAKE(GASNet, 0.2, no-define)

AC_PREFIX_DEFAULT(/usr/local/gasnet)
AM_CONFIG_HEADER(gasnet_config.h)

# Save useful directory names
TOP_SRCDIR=`cd ${srcdir} && pwd`
TOP_BUILDDIR=`pwd`
INSTALL_PREFIX=${prefix}
AC_SUBST(TOP_SRCDIR)
AC_SUBST(TOP_BUILDDIR)
AC_SUBST(INSTALL_PREFIX)

GASNET_RESTORE_AUTOCONF_ENV([CC CXX CFLAGS CXXFLAGS CPPFLAGS LIBS MAKE GMAKE AR RANLIB REXEC])

########################################################################
##
##  Site-Specific Prefabricated Collections of Settings
##

## Berkeley Millennium cluster

AC_MSG_CHECKING(for Berkeley Millennium cluster)

AC_ARG_ENABLE(millennium,
GASNET_OPTION_HELP(enable-millennium, use known directories for Berkeley Millennium cluster),
,
[case "`hostname`" in
  *.Millennium.Berkeley.EDU) enable_millennium=yes ;;
  *) enable_millennium=no ;;
esac])

#if test "$enable_millennium" = yes; then
#fi

AC_MSG_RESULT($enable_millennium)

## Berkeley NOW cluster

AC_MSG_CHECKING(for Berkeley NOW cluster)

AC_ARG_ENABLE(now,
GASNET_OPTION_HELP(enable-now, use known directories for Berkeley NOW cluster),
,
[if test `hostname` = "now.CS.Berkeley.EDU" -o \( -d /usr/now/lib -a -d /usr/now/include \) ; then
   enable_now=yes 
 else
   enable_now=no 
fi])

#if test "$enable_now" = yes; then
#fi

AC_MSG_RESULT($enable_now)


########################################################################
##
##  Supporting Command-Line Tools
##

GASNET_CHECK_PROGS(AR,ar gar,archiver)
GASNET_CHECK_PROGS(MAKE, $GMAKE gmake make $MAKE, GNU make)
GASNET_PATH_PROGS(GMAKE, $GMAKE gmake make $MAKE, GNU make)
AC_MSG_CHECKING(for GNU make)
if $GMAKE --version | grep GNU ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR(cannot find a version of GNU make - please install GNU make and/or set \$GMAKE to indicate where it's located)
fi
AC_SUBST(GMAKE)
AC_PROG_RANLIB



########################################################################
##
##  C/C++ Compilers
##

AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_RANLIB
AC_C_BIGENDIAN
AC_CHECK_PROG(AR,ar)
AC_CHECK_PROG(have_mpcc_r,mpcc_r,yes,no)

AC_MSG_CHECKING(known buggy C compilers)
AC_TRY_CPP([
#if __GNUC__ == 2 && __GNUC_MINOR__ == 96 && __GNUC_PATCHLEVEL__ == 0
# error
#endif
],
AC_MSG_RESULT(ok),
AC_MSG_RESULT(gcc 2.96)
AC_WARN(use of gcc 2.96 is strongly discouraged)
AC_WARN(consider using \$CC to pick a different compiler))


if test "$ac_cv_c_bigendian" = 'yes'; then
  ENDIANNESS="-DBIG_ENDIAN"
else
  ENDIANNESS="-DLITTLE_ENDIAN=1234"
  # avoid warnings from re-defining LITTLE_ENDIAN
  GASNET_TRY_CACHE_CHECK(for LITTLE_ENDIAN in stdlib.h, cc_littleend_stdlib,
    [#include <stdlib.h>
     #ifndef LITTLE_ENDIAN
       #error not defined
     #endif
    ], [], 
    ENDIANNESS="")
fi
AC_SUBST(ENDIANNESS)
AC_SUBST(CC)
AC_SUBST(RANLIB)
AC_SUBST(AR)

## specific compiler families

GASNET_FAMILY_CACHE_CHECK(C, CC, gasnet_cv_cc_family)

if test "$gasnet_cv_cc_family" = MIPS; then
  # The MIPSPro C compiler has a broken C preprocessor exit code, so we hardwire some choices
  AC_DEFINE(MIPSPRO_COMPILER)
fi

### 
#
# choose the default CC flags
#

case "$gasnet_cv_cc_family" in
  GNU)  CCOPTFLAGS="-O3" ;;
  Sun)  CCOPTFLAGS="-xO5" ;;
  Cray) CCOPTFLAGS="-O2 -hnomessage=236 -htaskprivate $LIBCM" ;; # DOB: -O3 is unstable on Cray cc
  MIPS) CCOPTFLAGS="-O3 -diag_suppress1171,1174,1209,1552 -LD_MSG:off=84" ;;
  XLC)  CCOPTFLAGS="-O5 -qsmp=noauto -qmaxmem=8192" ;; # -O5 == -O3 w/ intra-procedural analysis
  Compaq) CCOPTFLAGS="-O4 -msg_disable extrasemi -tune host" ;;
  *)    CCOPTFLAGS="-O" ;;
esac

case "$gasnet_cv_cc_family" in
  GNU)  CCDEBUGFLAGS="-g3 -Wall -Wno-unused" 
        #CCDEBUGFLAGS="$CCDEBUGFLAGS -ansi -U__STRICT_ANSI__"
  ;;
  Cray) CCDEBUGFLAGS="-g -hnomessage=236 -htaskprivate $LIBCM" ;;
  MIPS) CCDEBUGFLAGS="-g -diag_suppress1171,1174,1209,1552 -LD_MSG:off=84" ;;
  Compaq) CCDEBUGFLAGS="-g -msg_disable extrasemi" ;;
  *)    CCDEBUGFLAGS="-g" ;;
esac

GASNET_IF_ENABLED(debug, Build GASNet in a debugging mode, 
  [ CFLAGS="$CCDEBUGFLAGS"
    BUILDCONFIGFLAGS="-DDEBUG"
    BUILDCONFIG="debug"],
  [ CFLAGS="$CCOPTFLAGS"
    BUILDCONFIGFLAGS="-DNDEBUG"
    BUILDCONFIG="optimize"])

GASNET_IF_ENABLED(gasnet-quiet, Build GASNet lib w/o debug messages, 
  [ BUILDCONFIGFLAGS="$BUILDCONFIGFLAGS -DGASNET_QUIET"], [])

GASNET_IF_ENABLED(trace, Build GASNet with tracing enabled, 
  BUILDCONFIGFLAGS="$BUILDCONFIGFLAGS -DTRACE", )

GASNET_IF_ENABLED(stats, Build GASNet with statistical collection enabled, 
  BUILDCONFIGFLAGS="$BUILDCONFIGFLAGS -DSTATS", )

CFLAGS="$CFLAGS $BUILDCONFIGFLAGS"

AC_SUBST(CFLAGS)

segconfig=""
GASNET_IF_ENABLED(segment-fast, Build GASNet in the FAST shared segment configuration,
  segconfig="fast$segconfig", )
GASNET_IF_ENABLED(segment-large, Build GASNet in the LARGE shared segment configuration,
  segconfig="large$segconfig", )
GASNET_IF_ENABLED(segment-everything, Build GASNet in the EVERYTHING shared segment configuration,
  segconfig="everything$segconfig", )

case "$segconfig" in
  "") AC_DEFINE(GASNET_SEGMENT_FAST) ;;  # default is fast
  fast) AC_DEFINE(GASNET_SEGMENT_FAST) ;;
  large) AC_DEFINE(GASNET_SEGMENT_LARGE) ;;
  everything) AC_DEFINE(GASNET_SEGMENT_EVERYTHING) ;;
  *) AC_ERROR(Conflicting shared segment configurations specified) ;;
esac

GASNET_LIBGCC


########################################################################
##
##  Multithreading Libraries
##


## POSIX threads
#
OLDLIBS="$LIBS"
AC_SEARCH_LIBS(pthread_create, [pthread pthreads], have_pthread=yes, have_pthread=no)
LIBS="$OLDLIBS"

AM_CONDITIONAL(HAVE_PTHREAD, test "$have_pthread" = yes)

## Solaris threads

AC_CHECK_LIB(thread, thr_create, have_solthread=yes, have_solthread=no)



########################################################################
##
##  Cluster computing libraries
##


GASNET_CHECK_LIB(ens, NameServer_Init, have_libens=yes, , -L/usr/lib ${with_ens:+-L$with_ens})
AC_CHECK_LIB(glunix, Glib_Initialize, have_libglunix=yes, , -lsocket)

AC_PATH_PROG(REXEC, $REXEC rexec, , $with_rexec:$PATH)

AC_MSG_CHECKING(for Millennium rexec)
# We're only interested in the Millennium version of rexec
# the standard UNIX command 'rexec' has completely different behavior and is currently of no use to us
if test -n "$REXEC" -a -n "`$REXEC 2> /dev/null | grep -- '-n #nodes'`"; then
  have_rexec=yes
  GASNET_REXEC_DEFINES="-DREXEC"
  AC_MSG_RESULT(yes)
else
  have_rexec=no
  GASNET_REXEC_DEFINES=""
  AC_MSG_RESULT(no)
fi

if test "$have_libglunix" = yes ; then
  GASNET_GLUNIX_DEFINES="-DGLUNIX"
  GASNET_GLUNIX_INCLUDES="-I/usr/now/include"
  GASNET_GLUNIX_LIBS="-lglunix -lsocket"
else
  GASNET_GLUNIX_DEFINES=""
  GASNET_GLUNIX_INCLUDES=""
  GASNET_GLUNIX_LIBS=""
fi


#---------------------------------------------------------------------------------------------------------------
# Machine defs

AC_DEFINE(UNIX)
GASNET_THREAD_DEFINES=""
GASNET_THREAD_LIBS=""
case "$target_os" in
  solaris*)  
	AC_DEFINE(SOLARIS)
	GASNET_MACHINE_DEFINES="-DSOLARIS" 
 	if test "$have_pthread" = yes ; then
	  GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS="-lpthread"
        elif test "$have_solthread" = yes ; then
          GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS="-lthread"
        fi
        ;;
  linux*) 
	AC_DEFINE(LINUX)
	GASNET_MACHINE_DEFINES="-DLINUX"
 	if test "$have_pthread" = yes ; then
	  GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS="-lpthread"
	fi
	;;
  freebsd*) 
	AC_DEFINE(FREEBSD)
	GASNET_MACHINE_DEFINES="-DFREEBSD"
 	if test "$have_pthread" = yes ; then
	  GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS="-pthread"
	fi
	;;
  cygwin*) 
	AC_DEFINE(CYGWIN)
	GASNET_MACHINE_DEFINES="-DCYGWIN"
 	if test "$have_pthread" = yes ; then
	  GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS=""
	fi
	;;
  irix*)
	AC_DEFINE(IRIX)
	GASNET_MACHINE_DEFINES="-DIRIX"
	if test "$have_pthread" = yes ; then
	  GASNET_THREAD_DEFINES="-D_REENTRANT"
	  GASNET_THREAD_LIBS="-lpthread"
	fi
        ;;
  aix*)
	AC_DEFINE(AIX)
        GASNET_MACHINE_DEFINES="-DAIX"
        if test "$have_pthread" = yes ; then
          GASNET_THREAD_DEFINES="-D_REENTRANT -D_THREAD_SAFE"
          GASNET_THREAD_LIBS=-lpthread""
        fi
	;;
  osf*)
	AC_DEFINE(OSF)
	GASNET_MACHINE_DEFINES="-DOSF"
        if test "$have_pthread" = yes ; then
          GASNET_THREAD_DEFINES="-D_REENTRANT -D_THREAD_SAFE"
          GASNET_THREAD_LIBS="-pthread -lpthreads"
        fi
	;;
  unicos*)
	AC_DEFINE(UNICOS)
        GASNET_MACHINE_DEFINES="-DUNICOS"
        if test "$have_pthread" = yes ; then
          GASNET_THREAD_DEFINES="-D_REENTRANT"
          GASNET_THREAD_LIBS=-lpthread""
        fi
	GASNET_TRY_CACHE_CHECK(for Cray T3E, cc_is_t3e, [], [
	    #ifndef _CRAYT3E
	      #error not Cray T3E
	    #endif
	  ], [
	    GASNET_MACHINE_DEFINES="$GASNET_MACHINE_DEFINES -DCRAYT3E"
	    AC_DEFINE(CRAYT3E)
	  ])
        ;;
  *)
        AC_WARN(unknown OS - you may need to update the configure script)
        ;;
esac
GASNET_MACHINE_DEFINES="$GASNET_MACHINE_DEFINES -DUNIX"

#---------------------------------------------------------------------------------------------------------------
# Configure AMUDP
case "$target_os" in
  unicos*) # AMUDP not currently supported on Cray systems (due to 64-bit nature)
    supported_amudp=no 
    ;; 
  *)
    supported_amudp=yes 
    ;;
esac

if test $supported_amudp = yes; then
  # detect libraries necessary for udp-* backends
  OLDLIBS="$LIBS"
    LIBS=""
    AC_SEARCH_LIBS(socket, socket, have_udp=yes, have_udp=no)
    AC_SEARCH_LIBS(gethostbyname, nsl, , have_udp=no)
    GASNET_UDP_LIBS="$LIBS"
  LIBS="$OLDLIBS"
fi
AC_SUBST(GASNET_UDP_LIBS)
AM_CONDITIONAL(USE_AMUDP, test "$supported_amudp$have_udp" = yesyes)

#---------------------------------------------------------------------------------------------------------------
# Configure AMMPI 
# (In the future it would be nice to try and discover MPI setup automatically)
supported_ammpi=yes
if test $supported_ammpi = yes; then
  # user can explicitly configure MPI by setting MPI_CC, MPI_CFLAGS and MPI_LIBS
  have_mpi=yes # start by assuming they have it
  case "$target_os" in
    solaris*)  
        if test "$enable_now" = "yes" ; then
          # this config is for AMMPI-over-MPI-over-AMNOW (Berkeley NOW cluster)
    	  # (not meant as a production platform)
          # Use Sun cc (man acc to see options)
    	  GASNET_ENV_DEFAULT(MPI_CC, /usr/sww/opt/SUNWspro/bin/cc)
	  BASIC_MPI_CFLAGS="-DAMMPI_COEXIST_WITH_AM \
		-I/usr/now/am2/include -I/usr/now/include -I/usr/now/mpi/mpich/include \
		-w $BUILDCONFIGFLAGS"
	  if test "$BUILDCONFIG" = "optimize" ; then
    	    GASNET_ENV_DEFAULT(MPI_CFLAGS,  $BASIC_MPI_CFLAGS \
		-dalign -xarch=v8plusa -xchip=ultra -fast -xtarget=native -xO5)
	  else
    	    GASNET_ENV_DEFAULT(MPI_CFLAGS, $BASIC_MPI_CFLAGS -g -w)
	  fi
    	  GASNET_ENV_DEFAULT(MPI_LIBS, -lposix4 \
              -L/usr/now/mpi/mpich/lib/solaris/am2 -L/usr/now/lib\
              -L/usr/now/am2/lib -lmpi -lens -lglunix -lam2 -lthread\
              -lsocket -lnsl)
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, glurun -%N %C)
	  CFLAGS="$CFLAGS -DAMMPI_COEXIST_WITH_AM"
        else
          # I don't have access to a Solaris cluster with MPI (other than NOW) 
          # but these seem like sane defaults
    	  GASNET_ENV_DEFAULT(MPI_CC, mpicc)
    	  GASNET_ENV_DEFAULT(MPI_CFLAGS, $CFLAGS)
    	  GASNET_ENV_DEFAULT(MPI_LIBS, )
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        fi
        ;;
    linux*) 
    	GASNET_ENV_DEFAULT(MPI_CFLAGS, $CFLAGS)
    	GASNET_ENV_DEFAULT(MPI_LIBS, )
        if test "$enable_millennium" = yes; then

          #mpi_loc=/usr/mill/bin  # TCP/IP implementation
          # Millennium has screwy mpirun syntax to assure distinct nodes on TCP/IP p4 device
	  #GASNET_ENV_DEFAULT(MPIRUN_CMD, ${mpi_loc}/mpirun -np %N -nodes %N %C)

          mpi_loc=/usr/mill/pkg/mpich-1.2.1..7-gm/bin  # GM-based implementation
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, ${mpi_loc}/mpirun -np %N %C)

    	  GASNET_ENV_DEFAULT(MPI_CC, ${mpi_loc}/mpicc)
        else
    	  GASNET_ENV_DEFAULT(MPI_CC, mpicc)
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        fi
        ;;
    irix*)
	# use SGI native MPI library
        # user may need to do a "module load mpt" to make this work
    	GASNET_ENV_DEFAULT(MPI_CC, cc -n32)
	BASIC_MPI_CFLAGS="-diag_suppress1171,1174,1209,1552 $BUILDCONFIGFLAGS"
	if test "$BUILDCONFIG" = "optimize" ; then
      	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -O2 $BASIC_MPI_CFLAGS)
	else
      	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -g $BASIC_MPI_CFLAGS)
	fi
    	GASNET_ENV_DEFAULT(MPI_LIBS, -LD_MSG:off=84 -lmpi)
	GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        ;;
    aix*)
    	GASNET_ENV_DEFAULT(MPI_CC, mpcc)
	BASIC_MPI_CFLAGS="$BUILDCONFIGFLAGS"
	if test "$BUILDCONFIG" = "optimize" ; then
    	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -O3 -qstrict -qarch=pwr3 -qtune=pwr3 -qsmp=noauto -qmaxmem=8192 \
					 $BASIC_MPI_CFLAGS)
	else
    	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -g $BASIC_MPI_CFLAGS)
	fi
    	GASNET_ENV_DEFAULT(MPI_LIBS, [-Wl,-bbigtoc])
	GASNET_ENV_DEFAULT(MPIRUN_CMD, poe %C -nodes %N -tasks_per_node 1 -rmpool 1 -euilib us -retry 1 -retrycount 10000)
        ;;
    osf*)
	GASNET_ENV_DEFAULT(MPI_CC, cc)
	BASIC_MPI_CFLAGS="-msg_disable extrasemi $BUILDCONFIGFLAGS"
        if test "$BUILDCONFIG" = "optimize" ; then
          GASNET_ENV_DEFAULT(MPI_CFLAGS, -O4 -tune host $BASIC_MPI_CFLAGS)
        else
          GASNET_ENV_DEFAULT(MPI_CFLAGS, -g $BASIC_MPI_CFLAGS)
        fi
        GASNET_ENV_DEFAULT(MPI_LIBS, -lmpi -lelan -lrt)
        GASNET_ENV_DEFAULT(MPIRUN_CMD, prun -N %N %C)
        ;;
    unicos*)
        # Cray cc - need to enable private global vars and disable a silly warning
        # user may need to do a "module load mpt" to make this work
    	GASNET_ENV_DEFAULT(MPI_CC, cc)
	BASIC_MPI_CFLAGS="-htaskprivate -hnomessage=236 $LIBCM $BUILDCONFIGFLAGS"
	if test "$BUILDCONFIG" = "optimize" ; then
    	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -O2 $BASIC_MPI_CFLAGS)
	else
    	  GASNET_ENV_DEFAULT(MPI_CFLAGS, -g $BASIC_MPI_CFLAGS)
	fi
    	GASNET_ENV_DEFAULT(MPI_LIBS, -lpthread)
	GASNET_ENV_DEFAULT(MPIRUN_CMD, mpprun -n %N %C)
        ;;
    *) 
      # unknown OS - if user doesn't provide info, nothing we can do
      GASNET_ENV_DEFAULT(MPI_CC, )
      GASNET_ENV_DEFAULT(MPI_CFLAGS, $CFLAGS)
      GASNET_ENV_DEFAULT(MPI_LIBS, )
      GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
      if test "$MPI_CC" = ""; then
        AC_WARN(I don't know how to build MPI programs on your system)
        AC_WARN(consider using \$MPI_CC \$MPI_CFLAGS and \$MPI_LIBS to configure MPI support for your site if you want the mpi-* backends)
	MPI_CC=$CC
        have_mpi=no
      fi 
      ;;
  esac

  # now run a basic test of the MPI configuration to make sure it works
  if test $have_mpi = yes; then
    AC_MSG_CHECKING(for working MPI configuration)
    # we need a clean slate here because MPI config may be totally different
    OLDCC="$CC"
    OLDCFLAGS="$CFLAGS"
    OLDCPPFLAGS="$CPPFLAGS"
    OLDLDFLAGS="$LDFLAGS"
    OLDLIBS="$LIBS"
    CC="$MPI_CC"
    CFLAGS="$MPI_CFLAGS"
    CPPFLAGS=""
    LDFLAGS=""
    LIBS="$MPI_LIBS"
    # we just try to link an MPI app - running MPI apps is a whole new can of worms
    AC_TRY_LINK( [
      #include <stdlib.h>
      #include <mpi.h>
    ], [
      MPI_Init(NULL,NULL);
      MPI_Finalize();
    ], [ mpi_test_worked=yes ], [ mpi_test_worked=no] )
    CC="$OLDCC"
    CFLAGS="$OLDCFLAGS"
    CPPFLAGS="$OLDCPPFLAGS"
    LDFLAGS="$OLDLDFLAGS"
    LIBS="$OLDLIBS"

    if test "$mpi_test_worked" = yes ; then
      AC_MSG_RESULT(yes)
      if echo "$MPI_CFLAGS" | grep -- "-DAMMPI_COEXIST_WITH_AM" > /dev/null ; then
        # -DAMMPI_COEXIST_WITH_AM must be included whenever ammpi.h is compiled, or not at all
        MPI_DEFINES="$MPI_DEFINES -DAMMPI_COEXIST_WITH_AM"
      fi
    else
      AC_MSG_RESULT(no)
      AC_WARN(build test failed: I don't know how to build MPI programs on your system)
      AC_WARN(consider using \$MPI_CC \$MPI_CFLAGS and \$MPI_LIBS to configure MPI support for your site if you want the mpi-* backends)
      have_mpi=no
    fi
  fi
fi
AC_SUBST(MPI_CC) # compiler to be used to build AMMPI, and linker for AMMPI-based backends
AC_SUBST(MPI_CFLAGS) # compiler flags (optimization, includes, etc) to be used with above compiler when building AMMPI
AC_SUBST(MPI_LIBS) # libs and ldflags that must be used when linking AMMPI-based backend
AC_SUBST(MPI_DEFINES) # preprocessor defs to be used for all client code that includes ammpi.h (not including AMMPI library itself)
AC_SUBST(MPIRUN_CMD) # prototype command used by tcrun to run MPI programs
AM_CONDITIONAL(USE_MPI_CONDUIT, test "$have_mpi$supported_ammpi" = yesyes)
#--------------------------------------------------------------------------------------------------------

AC_SUBST(GASNET_MACHINE_DEFINES)
AC_SUBST(GASNET_THREAD_DEFINES)
AC_SUBST(GASNET_THREAD_LIBS)
AC_SUBST(GASNET_GLUNIX_DEFINES)
AC_SUBST(GASNET_GLUNIX_INCLUDES)
AC_SUBST(GASNET_GLUNIX_LIBS)
AC_SUBST(GASNET_REXEC_DEFINES)

#--------------------------------------------------------------------------------------------------------
# GM configuration

GASNET_IF_ENABLED(gm, Enable the Myricom/GM network conduit, 
  have_gm=yes,
  have_gm=no)
if test $have_gm = yes; then
  case "$target_os" in
    solaris*)
    ;;
    *)	# All unknown for now
        GASNET_ENV_DEFAULT(GM_INCLUDE, /usr/local/gm/include)
	GASNET_ENV_DEFAULT(GM_LIB, /usr/local/gm/lib)
	if test "$GM_INCLUDE" = "" || test ! -d "$GM_INCLUDE"; then
	  AC_WARN(GM includes: make sure \$GM_INCLUDE is set and exists)
	  have_gm=no
	fi
	if test "$GM_LIB" = ""; then
	  AC_WARN(GM library: make suremake sure \$GM_LIB is set and exists)
	  have_gm=no
	fi
    ;;
  esac

  if test $have_gm = yes; then
    AC_MSG_CHECKING(for working GM configuration)
    OLDCFLAGS="$CFLAGS"
    OLDLIBS="$LIBS"
    CFLAGS="-I$GM_INCLUDE -L$GM_LIB"
    LIBS="-lgm"
    # try to compile and link a simple gm_init, gm_finalize
    AC_TRY_LINK( [
      #include <stdlib.h>
      #include <gm.h>
    ], [
      gm_init();
      gm_finalize();
    ], [ gm_test_worked=yes ], [ gm_test_worked=no ] )
    CFLAGS="$OLDCFLAGS"
    LIBS="$OLDLIBS"

    if test "$gm_test_worked" = yes; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      AC_WARN(build test failed: I don't know how to build GM programs on your system)
      have_gm=no
    fi
  fi
fi

AC_SUBST(GM_INCLUDE)
AC_SUBST(GM_LIB)
AM_CONDITIONAL(USE_GM_CONDUIT, test "$have_gm$gm_test_worked" = yesyes)

#--------------------------------------------------------------------------------------------------------
# LAPI configuration

GASNET_IF_ENABLED(lapi, Enable the LAPI (IBM SP) network conduit, 
  have_lapi=yes,
  have_lapi=no)

# TODO: add a build configuration test here
lapi_test_worked=yes

AM_CONDITIONAL(USE_LAPI_CONDUIT, test "$have_lapi$lapi_test_worked" = yesyes)

#--------------------------------------------------------------------------------------------------------
# ELAN configuration

GASNET_IF_ENABLED(elan, Enable the elan (Quadrics) network conduit, 
  have_elan=yes,
  have_elan=no)

if test $have_elan = yes; then
  case "$target_os" in
    linux*)
	# the default locations are /usr/include and /usr/lib
        GASNET_ENV_DEFAULT(ELAN_INCLUDE, /usr/include)
	GASNET_ENV_DEFAULT(ELAN_LIBS, -lelan -lelan3)
    ;;
    *)
	# the default locations are /usr/opt/rms/include and /usr/lib
        GASNET_ENV_DEFAULT(ELAN_INCLUDE, /usr/opt/rms/include)
	GASNET_ENV_DEFAULT(ELAN_LIBS, -lelan -lelan3)
    ;;
  esac

  AC_MSG_CHECKING(for working ELAN configuration)
  OLDCFLAGS="$CFLAGS"
  OLDLIBS="$LIBS"
  CFLAGS="-I$ELAN_INCLUDE"
  LIBS="$ELAN_LIBS"
  # try to compile and link a simple elan prog
  AC_TRY_LINK( [
    #include <stdlib.h>
    #include <elan/elan.h>
  ], [
    elan_baseInit();
  ], [ elan_test_worked=yes ], [ elan_test_worked=no ] )
  CFLAGS="$OLDCFLAGS"
  LIBS="$OLDLIBS"

  if test "$elan_test_worked" = yes; then
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(for ELAN version)
    if test -e ${ELAN_INCLUDE}/elan/version.h; then
      verstr=`grep QSNETLIBS_VERSION_STRING ${ELAN_INCLUDE}/elan/version.h`
      [majorver=`echo $verstr | awk -F'[ \t]*|\"|[.]' '{ print $4 }'`]
      [minorver=`echo $verstr | awk -F'[ \t]*|\"|[.]' '{ print $5 }'`]
      [subver=`echo $verstr | awk -F'[ \t]*|\"|[.]' '{ print $6 }'`]
    else
      verstr=`grep 'ELAN_VERSION' ${ELAN_INCLUDE}/elan/misc.h`
      [majorver=`echo $verstr | awk -F'[ \t]*|\"|[.]' '{ print $5 }'`]
      [minorver=`echo $verstr | awk -F'[ \t]*|\"|[.]' '{ print $6 }'`]
      subver=0
    fi
    AC_MSG_RESULT("${majorver}.${minorver}.${subver}")
    ELAN_FLAGS="-DELAN_VERSION_MAJOR=${majorver} -DELAN_VERSION_MINOR=${minorver}"
  else
    AC_MSG_RESULT(no)
    ELAN_FLAGS=""
    AC_WARN(build test failed: I don't know how to build ELAN programs on your system)
  fi
fi

AC_SUBST(ELAN_INCLUDE)
AC_SUBST(ELAN_LIBS)
AC_SUBST(ELAN_FLAGS)
AM_CONDITIONAL(USE_ELAN_CONDUIT, test "$have_elan$elan_test_worked" = yesyes)

########################################################################

# Check for alloca in C code
AC_MSG_CHECKING(for alloca in C code)
ALLOCA_IN_C=""
AC_TRY_LINK([
/* AIX requires this to be the first thing in the file.  */
#ifndef __GNUC__
# if HAVE_ALLOCA_H
#  include <alloca.h>
# else
#  ifdef _AIX
 #pragma alloca
#  else
#   ifndef alloca /* predefined by HP cc +Olibcalls */
char *alloca ();
#   endif
#  endif
# endif
#endif
], [
char *p = (char *) alloca(10);
], [ alloca_in_c=yes ], [ alloca_in_c=no ])
if test "$alloca_in_c" = yes; then
  AC_MSG_RESULT(yes)
  ALLOCA_IN_C="1"
else
  AC_MSG_RESULT(no)
fi
AC_SUBST(ALLOCA_IN_C)

# -lm should only live in LIBM, and only if we have it (not in LIBS)
OLDLIBS="$LIBS"
# sin should be in everyone's libm if they've got one.
AC_CHECK_LIB(m, sin, LIBM="-lm", LIBM="")
AC_SUBST(LIBM)

LIBS="$OLDLIBS"

AC_CHECK_FUNCS(setenv putenv)

########################################################################

# Try to discover the C compiler's inline modifier

inlinemod=""
if test "$inlinemod" = ""; then
  GASNET_TRY_CACHE_CHECK(for inline modifier, cc_modinline,
    [inline int dummy() { return 1; }], [],
    AC_DEFINE(CC_INLINE_MODIFIER, inline)
    inlinemod=inline)
fi
if test "$inlinemod" = ""; then
  GASNET_TRY_CACHE_CHECK(for __inline__ modifier, cc_mod__inline__,
    [__inline__ int dummy() { return 1; }], [],
    AC_DEFINE(CC_INLINE_MODIFIER, __inline__)
    inlinemod=__inline__)
fi
if test "$inlinemod" = ""; then
  GASNET_TRY_CACHE_CHECK(for __inline modifier, cc_mod__inline,
    [__inline int dummy() { return 1; }], [],
    AC_DEFINE(CC_INLINE_MODIFIER, __inline)
    inlinemod=__inline)
fi
if test "$inlinemod" = ""; then
  GASNET_TRY_CACHE_CHECK(for _inline modifier, cc_mod_inline,
    [_inline int dummy() { return 1; }], [],
    AC_DEFINE(CC_INLINE_MODIFIER, _inline)
    inlinemod=_inline)
fi
if test "$inlinemod" = ""; then
  GASNET_TRY_CACHE_CHECK(for _Inline modifier, cc_mod_Inline,
    [_Inline int dummy() { return 1; }], [],
    AC_DEFINE(CC_INLINE_MODIFIER, _Inline)
    inlinemod=_Inline)
fi

if test "$inlinemod" != ""; then
  AC_MSG_CHECKING(whether static $inlinemod works)
  AC_TRY_COMPILE([static $inlinemod int dummy() { return 1; }], [],
    [AC_DEFINE(STATIC_INLINE_WORKS)
     AC_MSG_RESULT(yes)],
    AC_MSG_RESULT(no))
fi

# Runtime Var Arrays
GASNET_IF_ENABLED_WITH_AUTO(vararray, Use stack arrays of variable size in code,
AC_DEFINE(VARARRAY_WORKS),
,
GASNET_TRY_CACHE_CHECK(for variable stack arrays, cc_vararray_mod,
  [void dummy(int x) { char y[x]; }], [],
  AC_DEFINE(VARARRAY_WORKS)))

########################################################################
# different high-precision sleep libraries

# Check for usleep
GASNET_TRY_CACHE_CHECK(for usleep(), cc_has_usleep, [
#include <unistd.h>
], [
usleep(500);
],
  AC_SEARCH_LIBS(usleep, posix4, AC_DEFINE(HAVE_USLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for nanosleep
GASNET_TRY_CACHE_CHECK(for nanosleep(), cc_has_nanosleep, [
#include <time.h>
#include <sys/time.h>
], [
  struct timespec tm, tmremaining;
  tm.tv_sec =1;
  tm.tv_nsec = 1000000;
  nanosleep(&tm, &tmremaining);
],
  AC_SEARCH_LIBS(nanosleep, posix4, AC_DEFINE(HAVE_NANOSLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for nsleep
GASNET_TRY_CACHE_CHECK(for nsleep(), cc_has_nsleep, [
#include <time.h>
#include <sys/time.h>
], [
  struct timespec tm, tmremaining;
  tm.tv_sec =1;
  tm.tv_nsec = 1000000;
  nsleep(&tm, &tmremaining);
],
  AC_SEARCH_LIBS(nsleep, posix4, AC_DEFINE(HAVE_NSLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for sched_yield 
GASNET_TRY_CACHE_CHECK(for sched_yield(), cc_has_sched_yield, [
#include <sched.h>
], [
  sched_yield();
],
  AC_SEARCH_LIBS(sched_yield, posix4, AC_DEFINE(HAVE_SCHED_YIELD), AC_MSG_RESULT(entry point not found - disabled)))

#  AC_FUNC_MMAP
# Check for mmap functionality we actually use
GASNET_TRY_CACHE_RUN(for working mmap(), have_mmap, [
  #include <unistd.h>
  #include <sys/mman.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <stdio.h>
  char junk[[16384]];
  int main() {
    void *ptr,*ptr2;
    char filename[[255]];
    int fd;
    tmpnam(filename);
    fd = open(filename, O_RDWR | O_CREAT);
    if (fd == -1) return 1;
    if (write(fd, junk, 16384) == -1) return 2;
    ptr = mmap(0, 16384, (PROT_READ|PROT_WRITE), 
	MAP_PRIVATE, fd, 0);
    if (ptr == MAP_FAILED || ptr == NULL) return 3;
    if (munmap(ptr,16384) != 0) return 4;
    ptr2 = mmap(ptr, 16384, (PROT_READ|PROT_WRITE), 
	(MAP_PRIVATE | MAP_FIXED), fd, 0);
    if (ptr2 == MAP_FAILED || ptr2 == NULL || ptr2 != ptr) return 5;
    return 0;
  }],[AC_DEFINE(HAVE_MMAP)])

AC_SUBST(LIBS)

########################################################################
# Special GCC feature support

# Check for __builtin_expect (GCC 3.0) 
GASNET_TRY_CACHE_LINK(for __builtin_expect, cc_has_builtin_expect,
  [int x;], [if (__builtin_expect(x,1)) return 1;],
  AC_DEFINE(HAVE_BUILTIN_EXPECT))

GASNET_TRY_CACHE_LINK(for __func__, cc_has_func,
[],
[const char* p = __func__;],
AC_DEFINE(HAVE_FUNC))


########################################################################

# hunt for 16-, 32-, and 64-bit integer types

# Check sizes
AC_CHECK_SIZEOF(char, $cross_char)
AC_CHECK_SIZEOF(short, $cross_short)
AC_CHECK_SIZEOF(int, $cross_int)
AC_CHECK_SIZEOF(long, $cross_long)
AC_CHECK_SIZEOF(long long, $cross_long_long)
AC_CHECK_SIZEOF(void *, $cross_void_P)

AC_CHECK_HEADERS(inttypes.h)

########################################################################

# complete sp2 setup

case "$target_os" in
  aix*)
    # AIX linker doesn't allow large enough TOC by default to accomodate
    # most large applications
    # LDFLAGS="$LDFLAGS -Wl,-bbigtoc"

    # set the data segment size to the largest permitted size for 32-bit apps (2GB)
    LDFLAGS="$LDFLAGS -Wl,-bmaxdata:0x80000000"
  ;;
esac
AC_SUBST(LDFLAGS)


########################################################################
##
##  Final Output
##

GASNET_SAVE_AUTOCONF_ENV()

# Files added here should also be added to ./unBootstrap

AC_OUTPUT(
Makefile

mpi-conduit/Makefile
mpi-conduit/mpi-seq.mak
mpi-conduit/mpi-parsync.mak
mpi-conduit/mpi-par.mak

gm-conduit/Makefile
gm-conduit/gm-seq.mak
gm-conduit/gm-parsync.mak
gm-conduit/gm-par.mak

lapi-conduit/Makefile
lapi-conduit/lapi-seq.mak
lapi-conduit/lapi-parsync.mak
lapi-conduit/lapi-par.mak

elan-conduit/Makefile
elan-conduit/elan-seq.mak
elan-conduit/elan-parsync.mak
elan-conduit/elan-par.mak

other/Makefile
other/ammpi/Makefile
config-aux/Makefile
)
