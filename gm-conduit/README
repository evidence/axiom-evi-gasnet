README file for gm-conduit
================================

This file contains a template to help implementors get started in implementing a
GASNet conduit. It is not a functioning conduit - merely a "skeleton" with most
of the infrastructure in place so one can start filling in code specific to the
conduit network.

To use the template:

* Choose a conduit name - pick something relatively short and descriptive

* Copy the template-conduit directory to conduitname-conduit

* Do a search-and-replace on the files for the following patterns:
  <CONDUITNAME> => your conduit name, all in upper-case
  <conduitname> => your conduit name, all in lower-case
  (be sure not to insert any extraneous space characters around the names)

* Add your new directory to the top-level Makefile and any necessary
configuration checks to the configure.in script. You should create an
AM_CONDITIONAL() called USE_<CONDUITNAME>_CONDUIT and use it to control the
building of your conduit and any associated libraries in other/.

* Start filling in code specific to your conduit
  Several places in the template are marked with ??? to indicate a place where
  you must fill in conduit-specific values or code

The template is already setup to use the reference implementation of the
extended API, so you're recommended to start by implementing the core API, then
once that's done you can optionally choose to tune further by dropping in a
conduit-specific implementation of the extended API.

Core files:
gasnet_core.c		Main core functions
gasnet_core.h		Function prototypes for core
gasnet_core_fwd.h
gasnet_core_help.h
gasnet_core_internal.h
gasnet_core_firehose.c	Client-independent implementation of the firehose
			dynamic memory registration algorithm over AM
gasnet_core_turkey.c	Implementation of the turkey sandwich algorithm, which
			is mainly geared to optimising RDMA operations for UPC
			clients.
gasnet_core_misc.c	Misc. core functions send/callbacks/AM registration
gasnet_core_receive.c	GM receive/polling functions and AM reception

Extended files:
gasnet_extended.c		Main extended functions, which remain
				independent of the dynamic memory registration
				algorithm (mostly functions to sync and access
				regions).
gasnet_extended_internal.h
gasnet_extended_op.c		Op management, important from extended-ref
gasnet_extended_ref.c		Extended ref operations, used as fallbacks in
				both turkey and firehose algorithms
gasnet_extended.h		Function prototypes for extended
gasnet_extended_firehose.c	Extended firehose provides all put/get
				functions for firehose algorithm and supplies
				AM reply handlers to plug into
				gasnet_core_firehose.c 
gasnet_extended_turkey.c	Extended turkey provides all put/get functions
				for the turkey sandwich algorithms and supplies
				AM reply handlers to plug into
				gasnet_core_turkey.c
